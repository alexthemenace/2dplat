{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.18.2","compilation":{"directory":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,111,98,106,99,45,48,46,50,46,54],"program":"/Users/Kumar/.rustup/toolchains/nightly-2019-02-27-x86_64-apple-darwin/bin/rls","arguments":["--crate-name","objc","/Users/Kumar/.cargo/registry/src/github.com-1ecc6299db9ec823/objc-0.2.6/src/lib.rs","--color","never","--crate-type","lib","--emit=dep-info,metadata","-C","debuginfo=2","-C","metadata=c17325ffdd1bbfc4","-C","extra-filename=-c17325ffdd1bbfc4","--out-dir","/Users/Kumar/personal/workspace/rust/mayhem-galactica/target/rls/debug/deps","-L","dependency=/Users/Kumar/personal/workspace/rust/mayhem-galactica/target/rls/debug/deps","--extern","malloc_buf=/Users/Kumar/personal/workspace/rust/mayhem-galactica/target/rls/debug/deps/libmalloc_buf-df603b12b9877e45.rmeta","--cap-lints","allow","--error-format=json","--sysroot","/Users/Kumar/.rustup/toolchains/nightly-2019-02-27-x86_64-apple-darwin"],"output":[47,85,115,101,114,115,47,75,117,109,97,114,47,112,101,114,115,111,110,97,108,47,119,111,114,107,115,112,97,99,101,47,114,117,115,116,47,109,97,121,104,101,109,45,103,97,108,97,99,116,105,99,97,47,116,97,114,103,101,116,47,114,108,115,47,100,101,98,117,103,47,100,101,112,115,47,108,105,98,111,98,106,99,45,99,49,55,51,50,53,102,102,100,100,49,98,98,102,99,52,46,114,109,101,116,97]},"prelude":{"crate_id":{"name":"objc","disambiguator":[4761549618425253994,13971426658902094359]},"crate_root":"/Users/Kumar/.cargo/registry/src/github.com-1ecc6299db9ec823/objc-0.2.6/src","external_crates":[{"file_name":"/Users/Kumar/.cargo/registry/src/github.com-1ecc6299db9ec823/objc-0.2.6/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[17365010580081952725,18206160307474953630]}},{"file_name":"/Users/Kumar/.cargo/registry/src/github.com-1ecc6299db9ec823/objc-0.2.6/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[6760693024494354245,14002820984158080208]}},{"file_name":"/Users/Kumar/.cargo/registry/src/github.com-1ecc6299db9ec823/objc-0.2.6/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[199464317358532175,14697293645914925506]}},{"file_name":"/Users/Kumar/.cargo/registry/src/github.com-1ecc6299db9ec823/objc-0.2.6/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[13558819658400235840,6800895293433658904]}},{"file_name":"/Users/Kumar/.cargo/registry/src/github.com-1ecc6299db9ec823/objc-0.2.6/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[18425220944332119967,14239145101900690943]}},{"file_name":"/Users/Kumar/.cargo/registry/src/github.com-1ecc6299db9ec823/objc-0.2.6/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[10854247164472963508,11478657302719725741]}},{"file_name":"/Users/Kumar/.cargo/registry/src/github.com-1ecc6299db9ec823/objc-0.2.6/src/lib.rs","num":7,"id":{"name":"rustc_demangle","disambiguator":[4168194895173621532,15234647754953002462]}},{"file_name":"/Users/Kumar/.cargo/registry/src/github.com-1ecc6299db9ec823/objc-0.2.6/src/lib.rs","num":8,"id":{"name":"unwind","disambiguator":[12306654840912142307,10869972980572175885]}},{"file_name":"/Users/Kumar/.cargo/registry/src/github.com-1ecc6299db9ec823/objc-0.2.6/src/lib.rs","num":9,"id":{"name":"backtrace_sys","disambiguator":[1531625639640313062,14514900902579754273]}},{"file_name":"/Users/Kumar/.cargo/registry/src/github.com-1ecc6299db9ec823/objc-0.2.6/src/lib.rs","num":10,"id":{"name":"panic_unwind","disambiguator":[13209889598193010227,616765238597587583]}},{"file_name":"/Users/Kumar/.cargo/registry/src/github.com-1ecc6299db9ec823/objc-0.2.6/src/lib.rs","num":11,"id":{"name":"malloc_buf","disambiguator":[4053949291556387277,11784123301433309937]}},{"file_name":"/Users/Kumar/.cargo/registry/src/github.com-1ecc6299db9ec823/objc-0.2.6/src/lib.rs","num":12,"id":{"name":"libc","disambiguator":[2703259349667130902,12042406638146325142]}}],"span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,111,98,106,99,45,48,46,50,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":0,"byte_end":2606,"line_start":1,"line_end":90,"column_start":1,"column_end":16}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":476},"span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,111,98,106,99,45,48,46,50,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2227,"byte_end":2233,"line_start":72,"line_end":72,"column_start":18,"column_end":24},"alias_span":null,"name":"Encode","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":492},"span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,111,98,106,99,45,48,46,50,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2235,"byte_end":2250,"line_start":72,"line_end":72,"column_start":26,"column_end":41},"alias_span":null,"name":"EncodeArguments","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":450},"span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,111,98,106,99,45,48,46,50,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2252,"byte_end":2260,"line_start":72,"line_end":72,"column_start":43,"column_end":51},"alias_span":null,"name":"Encoding","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":604},"span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,111,98,106,99,45,48,46,50,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2281,"byte_end":2288,"line_start":73,"line_end":73,"column_start":19,"column_end":26},"alias_span":null,"name":"Message","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":614},"span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,111,98,106,99,45,48,46,50,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2290,"byte_end":2306,"line_start":73,"line_end":73,"column_start":28,"column_end":44},"alias_span":null,"name":"MessageArguments","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1142},"span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,111,98,106,99,45,48,46,50,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2308,"byte_end":2320,"line_start":73,"line_end":73,"column_start":46,"column_end":58},"alias_span":null,"name":"MessageError","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":628},"span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,111,98,106,99,45,48,46,50,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2341,"byte_end":2353,"line_start":75,"line_end":75,"column_start":18,"column_end":30},"alias_span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,111,98,106,99,45,48,46,50,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2357,"byte_end":2371,"line_start":75,"line_end":75,"column_start":34,"column_end":48},"name":"__send_message","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":630},"span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,111,98,106,99,45,48,46,50,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2390,"byte_end":2408,"line_start":76,"line_end":76,"column_start":18,"column_end":36},"alias_span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,111,98,106,99,45,48,46,50,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2412,"byte_end":2432,"line_start":76,"line_end":76,"column_start":40,"column_end":60},"name":"__send_super_message","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":332},"span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,111,98,106,99,45,48,46,50,46,54,47,115,114,99,47,114,99,47,109,111,100,46,114,115],"byte_start":40871,"byte_end":40880,"line_start":47,"line_end":47,"column_start":23,"column_end":32},"alias_span":null,"name":"StrongPtr","value":"","parent":{"krate":0,"index":314}},{"kind":"Use","ref_id":{"krate":0,"index":376},"span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,111,98,106,99,45,48,46,50,46,54,47,115,114,99,47,114,99,47,109,111,100,46,114,115],"byte_start":40902,"byte_end":40909,"line_start":48,"line_end":48,"column_start":21,"column_end":28},"alias_span":null,"name":"WeakPtr","value":"","parent":{"krate":0,"index":314}},{"kind":"Use","ref_id":{"krate":0,"index":412},"span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,111,98,106,99,45,48,46,50,46,54,47,115,114,99,47,114,99,47,109,111,100,46,114,115],"byte_start":40938,"byte_end":40953,"line_start":49,"line_end":49,"column_start":28,"column_end":43},"alias_span":null,"name":"autoreleasepool","value":"","parent":{"krate":0,"index":314}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,111,98,106,99,45,48,46,50,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":0,"byte_end":2606,"line_start":1,"line_end":90,"column_start":1,"column_end":16},"name":"","qualname":"::","value":"/Users/Kumar/.cargo/registry/src/github.com-1ecc6299db9ec823/objc-0.2.6/src/lib.rs","parent":null,"children":[{"krate":0,"index":2},{"krate":0,"index":4},{"krate":0,"index":6},{"krate":0,"index":8},{"krate":0,"index":16},{"krate":0,"index":24},{"krate":0,"index":26},{"krate":0,"index":28},{"krate":0,"index":38},{"krate":0,"index":220},{"krate":0,"index":314},{"krate":0,"index":420},{"krate":0,"index":502}],"decl_id":null,"docs":"Objective-C Runtime bindings and wrapper for Rust.","sig":null,"attributes":[{"value":"crate_name = \"objc\"","span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,111,98,106,99,45,48,46,50,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2053,"byte_end":2076,"line_start":63,"line_end":63,"column_start":1,"column_end":24}},{"value":"crate_type = \"lib\"","span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,111,98,106,99,45,48,46,50,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2077,"byte_end":2099,"line_start":64,"line_end":64,"column_start":1,"column_end":23}},{"value":"warn(missing_docs)","span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,111,98,106,99,45,48,46,50,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2101,"byte_end":2123,"line_start":66,"line_end":66,"column_start":1,"column_end":23}}]},{"kind":"Mod","id":{"krate":0,"index":38},"span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,111,98,106,99,45,48,46,50,46,54,47,115,114,99,47,114,117,110,116,105,109,101,46,114,115],"byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"runtime","qualname":"::runtime","value":"/Users/Kumar/.cargo/registry/src/github.com-1ecc6299db9ec823/objc-0.2.6/src/runtime.rs","parent":null,"children":[{"krate":0,"index":40},{"krate":0,"index":46},{"krate":0,"index":48},{"krate":0,"index":58},{"krate":0,"index":60},{"krate":0,"index":62},{"krate":0,"index":64},{"krate":0,"index":66},{"krate":0,"index":72},{"krate":0,"index":74},{"krate":0,"index":76},{"krate":0,"index":78},{"krate":0,"index":80},{"krate":0,"index":82},{"krate":0,"index":84},{"krate":0,"index":86},{"krate":0,"index":88},{"krate":0,"index":90},{"krate":0,"index":92},{"krate":0,"index":94},{"krate":0,"index":96},{"krate":0,"index":106},{"krate":0,"index":110},{"krate":0,"index":112},{"krate":0,"index":114},{"krate":0,"index":116},{"krate":0,"index":118},{"krate":0,"index":122},{"krate":0,"index":126},{"krate":0,"index":134},{"krate":0,"index":146},{"krate":0,"index":174},{"krate":0,"index":178},{"krate":0,"index":180},{"krate":0,"index":184},{"krate":0,"index":196},{"krate":0,"index":200},{"krate":0,"index":202},{"krate":0,"index":206},{"krate":0,"index":216}],"decl_id":null,"docs":" A Rust interface for the functionality of the Objective-C runtime.","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":72},"span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,111,98,106,99,45,48,46,50,46,54,47,115,114,99,47,114,117,110,116,105,109,101,46,114,115],"byte_start":7751,"byte_end":7755,"line_start":20,"line_end":20,"column_start":10,"column_end":14},"name":"BOOL","qualname":"::runtime::BOOL","value":"::std::os::raw::c_schar","parent":null,"children":[],"decl_id":null,"docs":" The Objective-C `BOOL` type.","sig":null,"attributes":[{"value":"cfg(not(target_arch = \"aarch64\"))","span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,111,98,106,99,45,48,46,50,46,54,47,115,114,99,47,114,117,110,116,105,109,101,46,114,115],"byte_start":7705,"byte_end":7741,"line_start":19,"line_end":19,"column_start":1,"column_end":37}}]},{"kind":"Const","id":{"krate":0,"index":74},"span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,111,98,106,99,45,48,46,50,46,54,47,115,114,99,47,114,117,110,116,105,109,101,46,114,115],"byte_start":7888,"byte_end":7891,"line_start":23,"line_end":23,"column_start":11,"column_end":14},"name":"YES","qualname":"::runtime::YES","value":"BOOL","parent":null,"children":[],"decl_id":null,"docs":" The equivalent of true for Objective-C's `BOOL` type.\n","sig":null,"attributes":[{"value":"cfg(not(target_arch = \"aarch64\"))","span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,111,98,106,99,45,48,46,50,46,54,47,115,114,99,47,114,117,110,116,105,109,101,46,114,115],"byte_start":7841,"byte_end":7877,"line_start":22,"line_end":22,"column_start":1,"column_end":37}}]},{"kind":"Const","id":{"krate":0,"index":76},"span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,111,98,106,99,45,48,46,50,46,54,47,115,114,99,47,114,117,110,116,105,109,101,46,114,115],"byte_start":8009,"byte_end":8011,"line_start":26,"line_end":26,"column_start":11,"column_end":13},"name":"NO","qualname":"::runtime::NO","value":"BOOL","parent":null,"children":[],"decl_id":null,"docs":" The equivalent of false for Objective-C's `BOOL` type.\n","sig":null,"attributes":[{"value":"cfg(not(target_arch = \"aarch64\"))","span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,111,98,106,99,45,48,46,50,46,54,47,115,114,99,47,114,117,110,116,105,109,101,46,114,115],"byte_start":7962,"byte_end":7998,"line_start":25,"line_end":25,"column_start":1,"column_end":37}}]},{"kind":"Struct","id":{"krate":0,"index":78},"span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,111,98,106,99,45,48,46,50,46,54,47,115,114,99,47,114,117,110,116,105,109,101,46,114,115],"byte_start":8267,"byte_end":8270,"line_start":37,"line_end":37,"column_start":12,"column_end":15},"name":"Sel","qualname":"::runtime::Sel","value":"Sel {  }","parent":null,"children":[{"krate":0,"index":19}],"decl_id":null,"docs":" A type that represents a method selector.\n","sig":null,"attributes":[{"value":"repr(C)","span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,111,98,106,99,45,48,46,50,46,54,47,115,114,99,47,114,117,110,116,105,109,101,46,114,115],"byte_start":8245,"byte_end":8255,"line_start":36,"line_end":36,"column_start":1,"column_end":11}}]},{"kind":"Struct","id":{"krate":0,"index":82},"span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,111,98,106,99,45,48,46,50,46,54,47,115,114,99,47,114,117,110,116,105,109,101,46,114,115],"byte_start":8508,"byte_end":8512,"line_start":47,"line_end":47,"column_start":12,"column_end":16},"name":"Ivar","qualname":"::runtime::Ivar","value":"Ivar {  }","parent":null,"children":[{"krate":0,"index":23}],"decl_id":null,"docs":" A type that represents an instance variable.\n","sig":null,"attributes":[{"value":"repr(C)","span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,111,98,106,99,45,48,46,50,46,54,47,115,114,99,47,114,117,110,116,105,109,101,46,114,115],"byte_start":8486,"byte_end":8496,"line_start":46,"line_end":46,"column_start":1,"column_end":11}}]},{"kind":"Struct","id":{"krate":0,"index":84},"span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,111,98,106,99,45,48,46,50,46,54,47,115,114,99,47,114,117,110,116,105,109,101,46,114,115],"byte_start":8625,"byte_end":8631,"line_start":53,"line_end":53,"column_start":12,"column_end":18},"name":"Method","qualname":"::runtime::Method","value":"Method {  }","parent":null,"children":[{"krate":0,"index":25}],"decl_id":null,"docs":" A type that represents a method in a class definition.\n","sig":null,"attributes":[{"value":"repr(C)","span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,111,98,106,99,45,48,46,50,46,54,47,115,114,99,47,114,117,110,116,105,109,101,46,114,115],"byte_start":8603,"byte_end":8613,"line_start":52,"line_end":52,"column_start":1,"column_end":11}}]},{"kind":"Struct","id":{"krate":0,"index":86},"span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,111,98,106,99,45,48,46,50,46,54,47,115,114,99,47,114,117,110,116,105,109,101,46,114,115],"byte_start":8734,"byte_end":8739,"line_start":59,"line_end":59,"column_start":12,"column_end":17},"name":"Class","qualname":"::runtime::Class","value":"Class {  }","parent":null,"children":[{"krate":0,"index":27}],"decl_id":null,"docs":" A type that represents an Objective-C class.\n","sig":null,"attributes":[{"value":"repr(C)","span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,111,98,106,99,45,48,46,50,46,54,47,115,114,99,47,114,117,110,116,105,109,101,46,114,115],"byte_start":8712,"byte_end":8722,"line_start":58,"line_end":58,"column_start":1,"column_end":11}}]},{"kind":"Struct","id":{"krate":0,"index":88},"span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,111,98,106,99,45,48,46,50,46,54,47,115,114,99,47,114,117,110,116,105,109,101,46,114,115],"byte_start":8845,"byte_end":8853,"line_start":65,"line_end":65,"column_start":12,"column_end":20},"name":"Protocol","qualname":"::runtime::Protocol","value":"Protocol {  }","parent":null,"children":[{"krate":0,"index":29}],"decl_id":null,"docs":" A type that represents an Objective-C protocol.\n","sig":null,"attributes":[{"value":"repr(C)","span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,111,98,106,99,45,48,46,50,46,54,47,115,114,99,47,114,117,110,116,105,109,101,46,114,115],"byte_start":8823,"byte_end":8833,"line_start":64,"line_end":64,"column_start":1,"column_end":11}}]},{"kind":"Struct","id":{"krate":0,"index":90},"span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,111,98,106,99,45,48,46,50,46,54,47,115,114,99,47,114,117,110,116,105,109,101,46,114,115],"byte_start":8957,"byte_end":8963,"line_start":71,"line_end":71,"column_start":12,"column_end":18},"name":"Object","qualname":"::runtime::Object","value":"Object {  }","parent":null,"children":[{"krate":0,"index":31}],"decl_id":null,"docs":" A type that represents an instance of a class.\n","sig":null,"attributes":[{"value":"repr(C)","span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,111,98,106,99,45,48,46,50,46,54,47,115,114,99,47,114,117,110,116,105,109,101,46,114,115],"byte_start":8935,"byte_end":8945,"line_start":70,"line_end":70,"column_start":1,"column_end":11}}]},{"kind":"Type","id":{"krate":0,"index":92},"span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,111,98,106,99,45,48,46,50,46,54,47,115,114,99,47,114,117,110,116,105,109,101,46,114,115],"byte_start":9059,"byte_end":9062,"line_start":76,"line_end":76,"column_start":10,"column_end":13},"name":"Imp","qualname":"::runtime::Imp","value":"unsafe extern \"C\" fn()","parent":null,"children":[],"decl_id":null,"docs":" A pointer to the start of a method implementation.\n","sig":null,"attributes":[]},{"kind":"ForeignFunction","id":{"krate":0,"index":33},"span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,111,98,106,99,45,48,46,50,46,54,47,115,114,99,47,114,117,110,116,105,109,101,46,114,115],"byte_start":9145,"byte_end":9161,"line_start":80,"line_end":80,"column_start":12,"column_end":28},"name":"sel_registerName","qualname":"::runtime::::sel_registerName","value":"fn (name: *const c_char) -> Sel","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"ForeignFunction","id":{"krate":0,"index":35},"span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,111,98,106,99,45,48,46,50,46,54,47,115,114,99,47,114,117,110,116,105,109,101,46,114,115],"byte_start":9202,"byte_end":9213,"line_start":81,"line_end":81,"column_start":12,"column_end":23},"name":"sel_getName","qualname":"::runtime::::sel_getName","value":"fn (sel: Sel) -> *const c_char","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"ForeignFunction","id":{"krate":0,"index":37},"span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,111,98,106,99,45,48,46,50,46,54,47,115,114,99,47,114,117,110,116,105,109,101,46,114,115],"byte_start":9254,"byte_end":9267,"line_start":83,"line_end":83,"column_start":12,"column_end":25},"name":"class_getName","qualname":"::runtime::::class_getName","value":"fn (cls: *const Class) -> *const c_char","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"ForeignFunction","id":{"krate":0,"index":39},"span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,111,98,106,99,45,48,46,50,46,54,47,115,114,99,47,114,117,110,116,105,109,101,46,114,115],"byte_start":9316,"byte_end":9335,"line_start":84,"line_end":84,"column_start":12,"column_end":31},"name":"class_getSuperclass","qualname":"::runtime::::class_getSuperclass","value":"fn (cls: *const Class) -> *const Class","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"ForeignFunction","id":{"krate":0,"index":41},"span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,111,98,106,99,45,48,46,50,46,54,47,115,114,99,47,114,117,110,116,105,109,101,46,114,115],"byte_start":9383,"byte_end":9404,"line_start":85,"line_end":85,"column_start":12,"column_end":33},"name":"class_getInstanceSize","qualname":"::runtime::::class_getInstanceSize","value":"fn (cls: *const Class) -> usize","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"ForeignFunction","id":{"krate":0,"index":43},"span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,111,98,106,99,45,48,46,50,46,54,47,115,114,99,47,114,117,110,116,105,109,101,46,114,115],"byte_start":9445,"byte_end":9468,"line_start":86,"line_end":86,"column_start":12,"column_end":35},"name":"class_getInstanceMethod","qualname":"::runtime::::class_getInstanceMethod","value":"fn (cls: *const Class, sel: Sel) -> *const Method","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"ForeignFunction","id":{"krate":0,"index":45},"span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,111,98,106,99,45,48,46,50,46,54,47,115,114,99,47,114,117,110,116,105,109,101,46,114,115],"byte_start":9527,"byte_end":9552,"line_start":87,"line_end":87,"column_start":12,"column_end":37},"name":"class_getInstanceVariable","qualname":"::runtime::::class_getInstanceVariable","value":"fn (cls: *const Class, name: *const c_char) -> *const Ivar","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"ForeignFunction","id":{"krate":0,"index":47},"span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,111,98,106,99,45,48,46,50,46,54,47,115,114,99,47,114,117,110,116,105,109,101,46,114,115],"byte_start":9620,"byte_end":9640,"line_start":88,"line_end":88,"column_start":12,"column_end":32},"name":"class_copyMethodList","qualname":"::runtime::::class_copyMethodList","value":"fn (cls: *const Class, outCount: *mut c_uint) -> *mut *const Method","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"ForeignFunction","id":{"krate":0,"index":49},"span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,111,98,106,99,45,48,46,50,46,54,47,115,114,99,47,114,117,110,116,105,109,101,46,114,115],"byte_start":9717,"byte_end":9735,"line_start":89,"line_end":89,"column_start":12,"column_end":30},"name":"class_copyIvarList","qualname":"::runtime::::class_copyIvarList","value":"fn (cls: *const Class, outCount: *mut c_uint) -> *mut *const Ivar","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"ForeignFunction","id":{"krate":0,"index":51},"span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,111,98,106,99,45,48,46,50,46,54,47,115,114,99,47,114,117,110,116,105,109,101,46,114,115],"byte_start":9810,"byte_end":9825,"line_start":90,"line_end":90,"column_start":12,"column_end":27},"name":"class_addMethod","qualname":"::runtime::::class_addMethod","value":"fn (cls: *mut Class, name: Sel, imp: Imp, types: *const c_char) -> BOOL","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"ForeignFunction","id":{"krate":0,"index":53},"span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,111,98,106,99,45,48,46,50,46,54,47,115,114,99,47,114,117,110,116,105,109,101,46,114,115],"byte_start":9906,"byte_end":9919,"line_start":91,"line_end":91,"column_start":12,"column_end":25},"name":"class_addIvar","qualname":"::runtime::::class_addIvar","value":"fn (cls: *mut Class, name: *const c_char, size: usize, alignment: u8, types: *const c_char) -> BOOL","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"ForeignFunction","id":{"krate":0,"index":55},"span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,111,98,106,99,45,48,46,50,46,54,47,115,114,99,47,114,117,110,116,105,109,101,46,114,115],"byte_start":10028,"byte_end":10045,"line_start":92,"line_end":92,"column_start":12,"column_end":29},"name":"class_addProtocol","qualname":"::runtime::::class_addProtocol","value":"fn (cls: *mut Class, proto: *const Protocol) -> BOOL","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"ForeignFunction","id":{"krate":0,"index":57},"span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,111,98,106,99,45,48,46,50,46,54,47,115,114,99,47,114,117,110,116,105,109,101,46,114,115],"byte_start":10107,"byte_end":10131,"line_start":93,"line_end":93,"column_start":12,"column_end":36},"name":"class_conformsToProtocol","qualname":"::runtime::::class_conformsToProtocol","value":"fn (cls: *const Class, proto: *const Protocol) -> BOOL","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"ForeignFunction","id":{"krate":0,"index":59},"span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,111,98,106,99,45,48,46,50,46,54,47,115,114,99,47,114,117,110,116,105,109,101,46,114,115],"byte_start":10195,"byte_end":10217,"line_start":94,"line_end":94,"column_start":12,"column_end":34},"name":"class_copyProtocolList","qualname":"::runtime::::class_copyProtocolList","value":"fn (cls: *const Class, outCount: *mut c_uint) -> *mut *const Protocol","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"ForeignFunction","id":{"krate":0,"index":61},"span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,111,98,106,99,45,48,46,50,46,54,47,115,114,99,47,114,117,110,116,105,109,101,46,114,115],"byte_start":10297,"byte_end":10319,"line_start":96,"line_end":96,"column_start":12,"column_end":34},"name":"objc_allocateClassPair","qualname":"::runtime::::objc_allocateClassPair","value":"fn (superclass: *const Class, name: *const c_char, extraBytes: usize) -> *mut Class","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"ForeignFunction","id":{"krate":0,"index":63},"span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,111,98,106,99,45,48,46,50,46,54,47,115,114,99,47,114,117,110,116,105,109,101,46,114,115],"byte_start":10412,"byte_end":10433,"line_start":97,"line_end":97,"column_start":12,"column_end":33},"name":"objc_disposeClassPair","qualname":"::runtime::::objc_disposeClassPair","value":"fn (cls: *mut Class) -> ()","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"ForeignFunction","id":{"krate":0,"index":65},"span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,111,98,106,99,45,48,46,50,46,54,47,115,114,99,47,114,117,110,116,105,109,101,46,114,115],"byte_start":10463,"byte_end":10485,"line_start":98,"line_end":98,"column_start":12,"column_end":34},"name":"objc_registerClassPair","qualname":"::runtime::::objc_registerClassPair","value":"fn (cls: *mut Class) -> ()","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"ForeignFunction","id":{"krate":0,"index":67},"span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,111,98,106,99,45,48,46,50,46,54,47,115,114,99,47,114,117,110,116,105,109,101,46,114,115],"byte_start":10516,"byte_end":10536,"line_start":100,"line_end":100,"column_start":12,"column_end":32},"name":"class_createInstance","qualname":"::runtime::::class_createInstance","value":"fn (cls: *const Class, extraBytes: usize) -> *mut Object","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"ForeignFunction","id":{"krate":0,"index":69},"span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,111,98,106,99,45,48,46,50,46,54,47,115,114,99,47,114,117,110,116,105,109,101,46,114,115],"byte_start":10602,"byte_end":10616,"line_start":101,"line_end":101,"column_start":12,"column_end":26},"name":"object_dispose","qualname":"::runtime::::object_dispose","value":"fn (obj: *mut Object) -> *mut Object","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"ForeignFunction","id":{"krate":0,"index":71},"span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,111,98,106,99,45,48,46,50,46,54,47,115,114,99,47,114,117,110,116,105,109,101,46,114,115],"byte_start":10662,"byte_end":10677,"line_start":102,"line_end":102,"column_start":12,"column_end":27},"name":"object_getClass","qualname":"::runtime::::object_getClass","value":"fn (obj: *const Object) -> *const Class","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"ForeignFunction","id":{"krate":0,"index":73},"span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,111,98,106,99,45,48,46,50,46,54,47,115,114,99,47,114,117,110,116,105,109,101,46,114,115],"byte_start":10727,"byte_end":10744,"line_start":104,"line_end":104,"column_start":12,"column_end":29},"name":"objc_getClassList","qualname":"::runtime::::objc_getClassList","value":"fn (buffer: *mut *const Class, bufferLen: c_int) -> c_int","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"ForeignFunction","id":{"krate":0,"index":75},"span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,111,98,106,99,45,48,46,50,46,54,47,115,114,99,47,114,117,110,116,105,109,101,46,114,115],"byte_start":10811,"byte_end":10829,"line_start":105,"line_end":105,"column_start":12,"column_end":30},"name":"objc_copyClassList","qualname":"::runtime::::objc_copyClassList","value":"fn (outCount: *mut c_uint) -> *mut *const Class","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"ForeignFunction","id":{"krate":0,"index":77},"span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,111,98,106,99,45,48,46,50,46,54,47,115,114,99,47,114,117,110,116,105,109,101,46,114,115],"byte_start":10886,"byte_end":10899,"line_start":106,"line_end":106,"column_start":12,"column_end":25},"name":"objc_getClass","qualname":"::runtime::::objc_getClass","value":"fn (name: *const c_char) -> *const Class","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"ForeignFunction","id":{"krate":0,"index":79},"span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,111,98,106,99,45,48,46,50,46,54,47,115,114,99,47,114,117,110,116,105,109,101,46,114,115],"byte_start":10949,"byte_end":10965,"line_start":107,"line_end":107,"column_start":12,"column_end":28},"name":"objc_getProtocol","qualname":"::runtime::::objc_getProtocol","value":"fn (name: *const c_char) -> *const Protocol","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"ForeignFunction","id":{"krate":0,"index":81},"span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,111,98,106,99,45,48,46,50,46,54,47,115,114,99,47,114,117,110,116,105,109,101,46,114,115],"byte_start":11018,"byte_end":11039,"line_start":108,"line_end":108,"column_start":12,"column_end":33},"name":"objc_copyProtocolList","qualname":"::runtime::::objc_copyProtocolList","value":"fn (outCount: *mut c_uint) -> *mut *const Protocol","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"ForeignFunction","id":{"krate":0,"index":83},"span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,111,98,106,99,45,48,46,50,46,54,47,115,114,99,47,114,117,110,116,105,109,101,46,114,115],"byte_start":11099,"byte_end":11120,"line_start":109,"line_end":109,"column_start":12,"column_end":33},"name":"objc_allocateProtocol","qualname":"::runtime::::objc_allocateProtocol","value":"fn (name: *const c_char) -> *mut Protocol","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"ForeignFunction","id":{"krate":0,"index":85},"span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,111,98,106,99,45,48,46,50,46,54,47,115,114,99,47,114,117,110,116,105,109,101,46,114,115],"byte_start":11171,"byte_end":11192,"line_start":110,"line_end":110,"column_start":12,"column_end":33},"name":"objc_registerProtocol","qualname":"::runtime::::objc_registerProtocol","value":"fn (proto: *mut Protocol) -> ()","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"ForeignFunction","id":{"krate":0,"index":87},"span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,111,98,106,99,45,48,46,50,46,54,47,115,114,99,47,114,117,110,116,105,109,101,46,114,115],"byte_start":11228,"byte_end":11252,"line_start":112,"line_end":112,"column_start":12,"column_end":36},"name":"objc_autoreleasePoolPush","qualname":"::runtime::::objc_autoreleasePoolPush","value":"fn () -> *mut c_void","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"ForeignFunction","id":{"krate":0,"index":89},"span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,111,98,106,99,45,48,46,50,46,54,47,115,114,99,47,114,117,110,116,105,109,101,46,114,115],"byte_start":11282,"byte_end":11305,"line_start":113,"line_end":113,"column_start":12,"column_end":35},"name":"objc_autoreleasePoolPop","qualname":"::runtime::::objc_autoreleasePoolPop","value":"fn (context: *mut c_void) -> ()","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"ForeignFunction","id":{"krate":0,"index":91},"span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,111,98,106,99,45,48,46,50,46,54,47,115,114,99,47,114,117,110,116,105,109,101,46,114,115],"byte_start":11341,"byte_end":11370,"line_start":115,"line_end":115,"column_start":12,"column_end":41},"name":"protocol_addMethodDescription","qualname":"::runtime::::protocol_addMethodDescription","value":"fn (proto: *mut Protocol, name: Sel, types: *const c_char, isRequiredMethod: BOOL, isInstanceMethod: BOOL) -> ()","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"ForeignFunction","id":{"krate":0,"index":93},"span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,111,98,106,99,45,48,46,50,46,54,47,115,114,99,47,114,117,110,116,105,109,101,46,114,115],"byte_start":11527,"byte_end":11547,"line_start":117,"line_end":117,"column_start":12,"column_end":32},"name":"protocol_addProtocol","qualname":"::runtime::::protocol_addProtocol","value":"fn (proto: *mut Protocol, addition: *const Protocol) -> ()","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"ForeignFunction","id":{"krate":0,"index":95},"span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,111,98,106,99,45,48,46,50,46,54,47,115,114,99,47,114,117,110,116,105,109,101,46,114,115],"byte_start":11609,"byte_end":11625,"line_start":118,"line_end":118,"column_start":12,"column_end":28},"name":"protocol_getName","qualname":"::runtime::::protocol_getName","value":"fn (proto: *const Protocol) -> *const c_char","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"ForeignFunction","id":{"krate":0,"index":97},"span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,111,98,106,99,45,48,46,50,46,54,47,115,114,99,47,114,117,110,116,105,109,101,46,114,115],"byte_start":11679,"byte_end":11695,"line_start":119,"line_end":119,"column_start":12,"column_end":28},"name":"protocol_isEqual","qualname":"::runtime::::protocol_isEqual","value":"fn (proto: *const Protocol, other: *const Protocol) -> BOOL","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"ForeignFunction","id":{"krate":0,"index":99},"span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,111,98,106,99,45,48,46,50,46,54,47,115,114,99,47,114,117,110,116,105,109,101,46,114,115],"byte_start":11764,"byte_end":11789,"line_start":120,"line_end":120,"column_start":12,"column_end":37},"name":"protocol_copyProtocolList","qualname":"::runtime::::protocol_copyProtocolList","value":"fn (proto: *const Protocol, outCount: *mut c_uint) -> *mut *const Protocol","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"ForeignFunction","id":{"krate":0,"index":101},"span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,111,98,106,99,45,48,46,50,46,54,47,115,114,99,47,114,117,110,116,105,109,101,46,114,115],"byte_start":11873,"byte_end":11900,"line_start":121,"line_end":121,"column_start":12,"column_end":39},"name":"protocol_conformsToProtocol","qualname":"::runtime::::protocol_conformsToProtocol","value":"fn (proto: *const Protocol, other: *const Protocol) -> BOOL","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"ForeignFunction","id":{"krate":0,"index":103},"span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,111,98,106,99,45,48,46,50,46,54,47,115,114,99,47,114,117,110,116,105,109,101,46,114,115],"byte_start":11970,"byte_end":11982,"line_start":123,"line_end":123,"column_start":12,"column_end":24},"name":"ivar_getName","qualname":"::runtime::::ivar_getName","value":"fn (ivar: *const Ivar) -> *const c_char","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"ForeignFunction","id":{"krate":0,"index":105},"span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,111,98,106,99,45,48,46,50,46,54,47,115,114,99,47,114,117,110,116,105,109,101,46,114,115],"byte_start":12031,"byte_end":12045,"line_start":124,"line_end":124,"column_start":12,"column_end":26},"name":"ivar_getOffset","qualname":"::runtime::::ivar_getOffset","value":"fn (ivar: *const Ivar) -> isize","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"ForeignFunction","id":{"krate":0,"index":107},"span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,111,98,106,99,45,48,46,50,46,54,47,115,114,99,47,114,117,110,116,105,109,101,46,114,115],"byte_start":12086,"byte_end":12106,"line_start":125,"line_end":125,"column_start":12,"column_end":32},"name":"ivar_getTypeEncoding","qualname":"::runtime::::ivar_getTypeEncoding","value":"fn (ivar: *const Ivar) -> *const c_char","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"ForeignFunction","id":{"krate":0,"index":109},"span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,111,98,106,99,45,48,46,50,46,54,47,115,114,99,47,114,117,110,116,105,109,101,46,114,115],"byte_start":12156,"byte_end":12170,"line_start":127,"line_end":127,"column_start":12,"column_end":26},"name":"method_getName","qualname":"::runtime::::method_getName","value":"fn (method: *const Method) -> Sel","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"ForeignFunction","id":{"krate":0,"index":111},"span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,111,98,106,99,45,48,46,50,46,54,47,115,114,99,47,114,117,110,116,105,109,101,46,114,115],"byte_start":12213,"byte_end":12237,"line_start":128,"line_end":128,"column_start":12,"column_end":36},"name":"method_getImplementation","qualname":"::runtime::::method_getImplementation","value":"fn (method: *const Method) -> Imp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"ForeignFunction","id":{"krate":0,"index":113},"span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,111,98,106,99,45,48,46,50,46,54,47,115,114,99,47,114,117,110,116,105,109,101,46,114,115],"byte_start":12280,"byte_end":12301,"line_start":129,"line_end":129,"column_start":12,"column_end":33},"name":"method_copyReturnType","qualname":"::runtime::::method_copyReturnType","value":"fn (method: *const Method) -> *mut c_char","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"ForeignFunction","id":{"krate":0,"index":115},"span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,111,98,106,99,45,48,46,50,46,54,47,115,114,99,47,114,117,110,116,105,109,101,46,114,115],"byte_start":12352,"byte_end":12375,"line_start":130,"line_end":130,"column_start":12,"column_end":35},"name":"method_copyArgumentType","qualname":"::runtime::::method_copyArgumentType","value":"fn (method: *const Method, index: c_uint) -> *mut c_char","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"ForeignFunction","id":{"krate":0,"index":117},"span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,111,98,106,99,45,48,46,50,46,54,47,115,114,99,47,114,117,110,116,105,109,101,46,114,115],"byte_start":12441,"byte_end":12468,"line_start":131,"line_end":131,"column_start":12,"column_end":39},"name":"method_getNumberOfArguments","qualname":"::runtime::::method_getNumberOfArguments","value":"fn (method: *const Method) -> c_uint","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"ForeignFunction","id":{"krate":0,"index":119},"span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,111,98,106,99,45,48,46,50,46,54,47,115,114,99,47,114,117,110,116,105,109,101,46,114,115],"byte_start":12514,"byte_end":12538,"line_start":132,"line_end":132,"column_start":12,"column_end":36},"name":"method_setImplementation","qualname":"::runtime::::method_setImplementation","value":"fn (method: *mut Method, imp: Imp) -> Imp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"ForeignFunction","id":{"krate":0,"index":121},"span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,111,98,106,99,45,48,46,50,46,54,47,115,114,99,47,114,117,110,116,105,109,101,46,114,115],"byte_start":12589,"byte_end":12619,"line_start":133,"line_end":133,"column_start":12,"column_end":42},"name":"method_exchangeImplementations","qualname":"::runtime::::method_exchangeImplementations","value":"fn (m1: *mut Method, m2: *mut Method) -> ()","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"ForeignFunction","id":{"krate":0,"index":123},"span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,111,98,106,99,45,48,46,50,46,54,47,115,114,99,47,114,117,110,116,105,109,101,46,114,115],"byte_start":12667,"byte_end":12678,"line_start":135,"line_end":135,"column_start":12,"column_end":23},"name":"objc_retain","qualname":"::runtime::::objc_retain","value":"fn (obj: *mut Object) -> *mut Object","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"ForeignFunction","id":{"krate":0,"index":125},"span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,111,98,106,99,45,48,46,50,46,54,47,115,114,99,47,114,117,110,116,105,109,101,46,114,115],"byte_start":12724,"byte_end":12736,"line_start":136,"line_end":136,"column_start":12,"column_end":24},"name":"objc_release","qualname":"::runtime::::objc_release","value":"fn (obj: *mut Object) -> ()","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"ForeignFunction","id":{"krate":0,"index":127},"span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,111,98,106,99,45,48,46,50,46,54,47,115,114,99,47,114,117,110,116,105,109,101,46,114,115],"byte_start":12767,"byte_end":12783,"line_start":137,"line_end":137,"column_start":12,"column_end":28},"name":"objc_autorelease","qualname":"::runtime::::objc_autorelease","value":"fn (obj: *mut Object) -> ()","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"ForeignFunction","id":{"krate":0,"index":129},"span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,111,98,106,99,45,48,46,50,46,54,47,115,114,99,47,114,117,110,116,105,109,101,46,114,115],"byte_start":12815,"byte_end":12836,"line_start":139,"line_end":139,"column_start":12,"column_end":33},"name":"objc_loadWeakRetained","qualname":"::runtime::::objc_loadWeakRetained","value":"fn (location: *mut *mut Object) -> *mut Object","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"ForeignFunction","id":{"krate":0,"index":131},"span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,111,98,106,99,45,48,46,50,46,54,47,115,114,99,47,114,117,110,116,105,109,101,46,114,115],"byte_start":12892,"byte_end":12905,"line_start":140,"line_end":140,"column_start":12,"column_end":25},"name":"objc_initWeak","qualname":"::runtime::::objc_initWeak","value":"fn (location: *mut *mut Object, obj: *mut Object) -> *mut Object","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"ForeignFunction","id":{"krate":0,"index":133},"span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,111,98,106,99,45,48,46,50,46,54,47,115,114,99,47,114,117,110,116,105,109,101,46,114,115],"byte_start":12979,"byte_end":12995,"line_start":141,"line_end":141,"column_start":12,"column_end":28},"name":"objc_destroyWeak","qualname":"::runtime::::objc_destroyWeak","value":"fn (location: *mut *mut Object) -> ()","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"ForeignFunction","id":{"krate":0,"index":135},"span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,111,98,106,99,45,48,46,50,46,54,47,115,114,99,47,114,117,110,116,105,109,101,46,114,115],"byte_start":13036,"byte_end":13049,"line_start":142,"line_end":142,"column_start":12,"column_end":25},"name":"objc_copyWeak","qualname":"::runtime::::objc_copyWeak","value":"fn (to: *mut *mut Object, from: *mut *mut Object) -> ()","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":98},"span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,111,98,106,99,45,48,46,50,46,54,47,115,114,99,47,114,117,110,116,105,109,101,46,114,115],"byte_start":13262,"byte_end":13270,"line_start":148,"line_end":148,"column_start":12,"column_end":20},"name":"register","qualname":"<Sel>::register","value":"fn (name: &str) -> Sel","parent":null,"children":[],"decl_id":null,"docs":" Registers a method with the Objective-C runtime system,\n maps the method name to a selector, and returns the selector value.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":100},"span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,111,98,106,99,45,48,46,50,46,54,47,115,114,99,47,114,117,110,116,105,109,101,46,114,115],"byte_start":13487,"byte_end":13491,"line_start":156,"line_end":156,"column_start":12,"column_end":16},"name":"name","qualname":"<Sel>::name","value":"fn (&self) -> &str","parent":null,"children":[],"decl_id":null,"docs":" Returns the name of the method specified by self.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":102},"span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,111,98,106,99,45,48,46,50,46,54,47,115,114,99,47,114,117,110,116,105,109,101,46,114,115],"byte_start":13829,"byte_end":13837,"line_start":167,"line_end":167,"column_start":19,"column_end":27},"name":"from_ptr","qualname":"<Sel>::from_ptr","value":"fn (ptr: *const c_void) -> Sel","parent":null,"children":[],"decl_id":null,"docs":" Wraps a raw pointer to a selector into a `Sel` object.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,111,98,106,99,45,48,46,50,46,54,47,115,114,99,47,114,117,110,116,105,109,101,46,114,115],"byte_start":13801,"byte_end":13810,"line_start":166,"line_end":166,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":104},"span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,111,98,106,99,45,48,46,50,46,54,47,115,114,99,47,114,117,110,116,105,109,101,46,114,115],"byte_start":13992,"byte_end":13998,"line_start":175,"line_end":175,"column_start":12,"column_end":18},"name":"as_ptr","qualname":"<Sel>::as_ptr","value":"fn (&self) -> *const c_void","parent":null,"children":[],"decl_id":null,"docs":" Returns a pointer to the raw selector.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,111,98,106,99,45,48,46,50,46,54,47,115,114,99,47,114,117,110,116,105,109,101,46,114,115],"byte_start":13971,"byte_end":13980,"line_start":174,"line_end":174,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":128},"span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,111,98,106,99,45,48,46,50,46,54,47,115,114,99,47,114,117,110,116,105,109,101,46,114,115],"byte_start":14570,"byte_end":14574,"line_start":206,"line_end":206,"column_start":12,"column_end":16},"name":"name","qualname":"<Ivar>::name","value":"fn (&self) -> &str","parent":null,"children":[],"decl_id":null,"docs":" Returns the name of self.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":130},"span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,111,98,106,99,45,48,46,50,46,54,47,115,114,99,47,114,117,110,116,105,109,101,46,114,115],"byte_start":14781,"byte_end":14787,"line_start":214,"line_end":214,"column_start":12,"column_end":18},"name":"offset","qualname":"<Ivar>::offset","value":"fn (&self) -> isize","parent":null,"children":[],"decl_id":null,"docs":" Returns the offset of self.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":132},"span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,111,98,106,99,45,48,46,50,46,54,47,115,114,99,47,114,117,110,116,105,109,101,46,114,115],"byte_start":14962,"byte_end":14975,"line_start":222,"line_end":222,"column_start":12,"column_end":25},"name":"type_encoding","qualname":"<Ivar>::type_encoding","value":"fn (&self) -> Encoding","parent":null,"children":[],"decl_id":null,"docs":" Returns the `Encoding` of self.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":136},"span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,111,98,106,99,45,48,46,50,46,54,47,115,114,99,47,114,117,110,116,105,109,101,46,114,115],"byte_start":15253,"byte_end":15257,"line_start":233,"line_end":233,"column_start":12,"column_end":16},"name":"name","qualname":"<Method>::name","value":"fn (&self) -> Sel","parent":null,"children":[],"decl_id":null,"docs":" Returns the name of self.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":138},"span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,111,98,106,99,45,48,46,50,46,54,47,115,114,99,47,114,117,110,116,105,109,101,46,114,115],"byte_start":15406,"byte_end":15417,"line_start":240,"line_end":240,"column_start":12,"column_end":23},"name":"return_type","qualname":"<Method>::return_type","value":"fn (&self) -> Encoding","parent":null,"children":[],"decl_id":null,"docs":" Returns the `Encoding` of self's return type.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":140},"span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,111,98,106,99,45,48,46,50,46,54,47,115,114,99,47,114,117,110,116,105,109,101,46,114,115],"byte_start":15716,"byte_end":15729,"line_start":249,"line_end":249,"column_start":12,"column_end":25},"name":"argument_type","qualname":"<Method>::argument_type","value":"fn (&self, index: usize) -> Option<Encoding>","parent":null,"children":[],"decl_id":null,"docs":" Returns the `Encoding` of a single parameter type of self, or\n `None` if self has no parameter at the given index.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":142},"span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,111,98,106,99,45,48,46,50,46,54,47,115,114,99,47,114,117,110,116,105,109,101,46,114,115],"byte_start":16099,"byte_end":16114,"line_start":261,"line_end":261,"column_start":12,"column_end":27},"name":"arguments_count","qualname":"<Method>::arguments_count","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of arguments accepted by self.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":144},"span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,111,98,106,99,45,48,46,50,46,54,47,115,114,99,47,114,117,110,116,105,109,101,46,114,115],"byte_start":16277,"byte_end":16291,"line_start":268,"line_end":268,"column_start":12,"column_end":26},"name":"implementation","qualname":"<Method>::implementation","value":"fn (&self) -> Imp","parent":null,"children":[],"decl_id":null,"docs":" Returns the implementation of self.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":148},"span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,111,98,106,99,45,48,46,50,46,54,47,115,114,99,47,114,117,110,116,105,109,101,46,114,115],"byte_start":16549,"byte_end":16552,"line_start":278,"line_end":278,"column_start":12,"column_end":15},"name":"get","qualname":"<Class>::get","value":"fn (name: &str) -> Option<&'static Class>","parent":null,"children":[],"decl_id":null,"docs":" Returns the class definition of a specified class, or `None` if the\n class is not registered with the Objective-C runtime.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":150},"span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,111,98,106,99,45,48,46,50,46,54,47,115,114,99,47,114,117,110,116,105,109,101,46,114,115],"byte_start":16855,"byte_end":16862,"line_start":287,"line_end":287,"column_start":12,"column_end":19},"name":"classes","qualname":"<Class>::classes","value":"fn () -> MallocBuffer<&'static Class>","parent":null,"children":[],"decl_id":null,"docs":" Obtains the list of registered class definitions.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":152},"span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,111,98,106,99,45,48,46,50,46,54,47,115,114,99,47,114,117,110,116,105,109,101,46,114,115],"byte_start":17171,"byte_end":17184,"line_start":296,"line_end":296,"column_start":12,"column_end":25},"name":"classes_count","qualname":"<Class>::classes_count","value":"fn () -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the total number of registered classes.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":154},"span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,111,98,106,99,45,48,46,50,46,54,47,115,114,99,47,114,117,110,116,105,109,101,46,114,115],"byte_start":17336,"byte_end":17340,"line_start":303,"line_end":303,"column_start":12,"column_end":16},"name":"name","qualname":"<Class>::name","value":"fn (&self) -> &str","parent":null,"children":[],"decl_id":null,"docs":" Returns the name of self.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":156},"span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,111,98,106,99,45,48,46,50,46,54,47,115,114,99,47,114,117,110,116,105,109,101,46,114,115],"byte_start":17587,"byte_end":17597,"line_start":311,"line_end":311,"column_start":12,"column_end":22},"name":"superclass","qualname":"<Class>::superclass","value":"fn (&self) -> Option<&Class>","parent":null,"children":[],"decl_id":null,"docs":" Returns the superclass of self, or `None` if self is a root class.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":158},"span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,111,98,106,99,45,48,46,50,46,54,47,115,114,99,47,114,117,110,116,105,109,101,46,114,115],"byte_start":17838,"byte_end":17847,"line_start":319,"line_end":319,"column_start":12,"column_end":21},"name":"metaclass","qualname":"<Class>::metaclass","value":"fn (&self) -> &Class","parent":null,"children":[],"decl_id":null,"docs":" Returns the metaclass of self.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":160},"span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,111,98,106,99,45,48,46,50,46,54,47,115,114,99,47,114,117,110,116,105,109,101,46,114,115],"byte_start":18063,"byte_end":18076,"line_start":327,"line_end":327,"column_start":12,"column_end":25},"name":"instance_size","qualname":"<Class>::instance_size","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the size of instances of self.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":162},"span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,111,98,106,99,45,48,46,50,46,54,47,115,114,99,47,114,117,110,116,105,109,101,46,114,115],"byte_start":18361,"byte_end":18376,"line_start":336,"line_end":336,"column_start":12,"column_end":27},"name":"instance_method","qualname":"<Class>::instance_method","value":"fn (&self, sel: Sel) -> Option<&Method>","parent":null,"children":[],"decl_id":null,"docs":" Returns a specified instance method for self, or `None` if self and\n its superclasses do not contain an instance method with the\n specified selector.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":164},"span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,111,98,106,99,45,48,46,50,46,54,47,115,114,99,47,114,117,110,116,105,109,101,46,114,115],"byte_start":18713,"byte_end":18730,"line_start":345,"line_end":345,"column_start":12,"column_end":29},"name":"instance_variable","qualname":"<Class>::instance_variable","value":"fn (&self, name: &str) -> Option<&Ivar>","parent":null,"children":[],"decl_id":null,"docs":" Returns the ivar for a specified instance variable of self, or `None`\n if self has no ivar with the given name.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":166},"span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,111,98,106,99,45,48,46,50,46,54,47,115,114,99,47,114,117,110,116,105,109,101,46,114,115],"byte_start":19054,"byte_end":19070,"line_start":354,"line_end":354,"column_start":12,"column_end":28},"name":"instance_methods","qualname":"<Class>::instance_methods","value":"fn (&self) -> MallocBuffer<&Method>","parent":null,"children":[],"decl_id":null,"docs":" Describes the instance methods implemented by self.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":168},"span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,111,98,106,99,45,48,46,50,46,54,47,115,114,99,47,114,117,110,116,105,109,101,46,114,115],"byte_start":19400,"byte_end":19411,"line_start":364,"line_end":364,"column_start":12,"column_end":23},"name":"conforms_to","qualname":"<Class>::conforms_to","value":"fn (&self, proto: &Protocol) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Checks whether this class conforms to the specified protocol.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":170},"span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,111,98,106,99,45,48,46,50,46,54,47,115,114,99,47,114,117,110,116,105,109,101,46,114,115],"byte_start":19595,"byte_end":19612,"line_start":369,"line_end":369,"column_start":12,"column_end":29},"name":"adopted_protocols","qualname":"<Class>::adopted_protocols","value":"fn (&self) -> MallocBuffer<&Protocol>","parent":null,"children":[],"decl_id":null,"docs":" Get a list of the protocols to which this class conforms.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":172},"span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,111,98,106,99,45,48,46,50,46,54,47,115,114,99,47,114,117,110,116,105,109,101,46,114,115],"byte_start":19932,"byte_end":19950,"line_start":378,"line_end":378,"column_start":12,"column_end":30},"name":"instance_variables","qualname":"<Class>::instance_variables","value":"fn (&self) -> MallocBuffer<&Ivar>","parent":null,"children":[],"decl_id":null,"docs":" Describes the instance variables declared by self.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":186},"span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,111,98,106,99,45,48,46,50,46,54,47,115,114,99,47,114,117,110,116,105,109,101,46,114,115],"byte_start":20718,"byte_end":20721,"line_start":406,"line_end":406,"column_start":12,"column_end":15},"name":"get","qualname":"<Protocol>::get","value":"fn (name: &str) -> Option<&'static Protocol>","parent":null,"children":[],"decl_id":null,"docs":" Returns the protocol definition of a specified protocol, or `None` if the\n protocol is not registered with the Objective-C runtime.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":188},"span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,111,98,106,99,45,48,46,50,46,54,47,115,114,99,47,114,117,110,116,105,109,101,46,114,115],"byte_start":21039,"byte_end":21048,"line_start":415,"line_end":415,"column_start":12,"column_end":21},"name":"protocols","qualname":"<Protocol>::protocols","value":"fn () -> MallocBuffer<&'static Protocol>","parent":null,"children":[],"decl_id":null,"docs":" Obtains the list of registered protocol definitions.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":190},"span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,111,98,106,99,45,48,46,50,46,54,47,115,114,99,47,114,117,110,116,105,109,101,46,114,115],"byte_start":21380,"byte_end":21397,"line_start":424,"line_end":424,"column_start":12,"column_end":29},"name":"adopted_protocols","qualname":"<Protocol>::adopted_protocols","value":"fn (&self) -> MallocBuffer<&Protocol>","parent":null,"children":[],"decl_id":null,"docs":" Get a list of the protocols to which this protocol conforms.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":192},"span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,111,98,106,99,45,48,46,50,46,54,47,115,114,99,47,114,117,110,116,105,109,101,46,114,115],"byte_start":21740,"byte_end":21751,"line_start":433,"line_end":433,"column_start":12,"column_end":23},"name":"conforms_to","qualname":"<Protocol>::conforms_to","value":"fn (&self, proto: &Protocol) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Checks whether this protocol conforms to the specified protocol.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":194},"span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,111,98,106,99,45,48,46,50,46,54,47,115,114,99,47,114,117,110,116,105,109,101,46,114,115],"byte_start":21906,"byte_end":21910,"line_start":438,"line_end":438,"column_start":12,"column_end":16},"name":"name","qualname":"<Protocol>::name","value":"fn (&self) -> &str","parent":null,"children":[],"decl_id":null,"docs":" Returns the name of self.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":208},"span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,111,98,106,99,45,48,46,50,46,54,47,115,114,99,47,114,117,110,116,105,109,101,46,114,115],"byte_start":22438,"byte_end":22443,"line_start":462,"line_end":462,"column_start":12,"column_end":17},"name":"class","qualname":"<Object>::class","value":"fn (&self) -> &Class","parent":null,"children":[],"decl_id":null,"docs":" Returns the class of self.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":210},"span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,111,98,106,99,45,48,46,50,46,54,47,115,114,99,47,114,117,110,116,105,109,101,46,114,115],"byte_start":22769,"byte_end":22777,"line_start":472,"line_end":472,"column_start":19,"column_end":27},"name":"get_ivar","qualname":"<Object>::get_ivar","value":"fn <T> (&self, name: &str) -> &T","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the ivar of self with the given name.\n Panics if self has no ivar with the given name.\n Unsafe because the caller must ensure that the ivar is actually\n of type `T`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":212},"span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,111,98,106,99,45,48,46,50,46,54,47,115,114,99,47,114,117,110,116,105,109,101,46,114,115],"byte_start":23591,"byte_end":23603,"line_start":494,"line_end":494,"column_start":19,"column_end":31},"name":"get_mut_ivar","qualname":"<Object>::get_mut_ivar","value":"fn <T> (&mut self, name: &str) -> &mut T","parent":null,"children":[],"decl_id":null,"docs":" Returns a mutable reference to the ivar of self with the given name.\n Panics if self has no ivar with the given name.\n Unsafe because the caller must ensure that the ivar is actually\n of type `T`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":214},"span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,111,98,106,99,45,48,46,50,46,54,47,115,114,99,47,114,117,110,116,105,109,101,46,114,115],"byte_start":24422,"byte_end":24430,"line_start":517,"line_end":517,"column_start":19,"column_end":27},"name":"set_ivar","qualname":"<Object>::set_ivar","value":"fn <T> (&mut self, name: &str, value: T) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Sets the value of the ivar of self with the given name.\n Panics if self has no ivar with the given name.\n Unsafe because the caller must ensure that the ivar is actually\n of type `T`.\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":220},"span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,111,98,106,99,45,48,46,50,46,54,47,115,114,99,47,100,101,99,108,97,114,101,46,114,115],"byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"declare","qualname":"::declare","value":"/Users/Kumar/.cargo/registry/src/github.com-1ecc6299db9ec823/objc-0.2.6/src/declare.rs","parent":null,"children":[{"krate":0,"index":222},{"krate":0,"index":224},{"krate":0,"index":226},{"krate":0,"index":228},{"krate":0,"index":246},{"krate":0,"index":256},{"krate":0,"index":266},{"krate":0,"index":632},{"krate":0,"index":642},{"krate":0,"index":652},{"krate":0,"index":662},{"krate":0,"index":672},{"krate":0,"index":682},{"krate":0,"index":692},{"krate":0,"index":702},{"krate":0,"index":712},{"krate":0,"index":722},{"krate":0,"index":732},{"krate":0,"index":742},{"krate":0,"index":752},{"krate":0,"index":762},{"krate":0,"index":772},{"krate":0,"index":782},{"krate":0,"index":792},{"krate":0,"index":802},{"krate":0,"index":812},{"krate":0,"index":822},{"krate":0,"index":832},{"krate":0,"index":842},{"krate":0,"index":852},{"krate":0,"index":862},{"krate":0,"index":872},{"krate":0,"index":882},{"krate":0,"index":268},{"krate":0,"index":270},{"krate":0,"index":272},{"krate":0,"index":274},{"krate":0,"index":276},{"krate":0,"index":294},{"krate":0,"index":298},{"krate":0,"index":300}],"decl_id":null,"docs":"Functionality for declaring Objective-C classes.","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":256},"span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,111,98,106,99,45,48,46,50,46,54,47,115,114,99,47,100,101,99,108,97,114,101,46,114,115],"byte_start":29019,"byte_end":29039,"line_start":45,"line_end":45,"column_start":11,"column_end":31},"name":"MethodImplementation","qualname":"::declare::MethodImplementation","value":"MethodImplementation","parent":null,"children":[{"krate":0,"index":258},{"krate":0,"index":260},{"krate":0,"index":262},{"krate":0,"index":264}],"decl_id":null,"docs":" Types that can be used as the implementation of an Objective-C method.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":258},"span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,111,98,106,99,45,48,46,50,46,54,47,115,114,99,47,100,101,99,108,97,114,101,46,114,115],"byte_start":29090,"byte_end":29096,"line_start":47,"line_end":47,"column_start":10,"column_end":16},"name":"Callee","qualname":"::declare::MethodImplementation::Callee","value":"type Callee: Message;","parent":{"krate":0,"index":256},"children":[],"decl_id":null,"docs":" The callee type of the method.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":260},"span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,111,98,106,99,45,48,46,50,46,54,47,115,114,99,47,100,101,99,108,97,114,101,46,114,115],"byte_start":29155,"byte_end":29158,"line_start":49,"line_end":49,"column_start":10,"column_end":13},"name":"Ret","qualname":"::declare::MethodImplementation::Ret","value":"type Ret: Encode;","parent":{"krate":0,"index":256},"children":[],"decl_id":null,"docs":" The return type of the method.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":262},"span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,111,98,106,99,45,48,46,50,46,54,47,115,114,99,47,100,101,99,108,97,114,101,46,114,115],"byte_start":29219,"byte_end":29223,"line_start":51,"line_end":51,"column_start":10,"column_end":14},"name":"Args","qualname":"::declare::MethodImplementation::Args","value":"type Args: EncodeArguments;","parent":{"krate":0,"index":256},"children":[],"decl_id":null,"docs":" The argument types of the method.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":264},"span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,111,98,106,99,45,48,46,50,46,54,47,115,114,99,47,100,101,99,108,97,114,101,46,114,115],"byte_start":29296,"byte_end":29299,"line_start":54,"line_end":54,"column_start":8,"column_end":11},"name":"imp","qualname":"::declare::MethodImplementation::imp","value":"fn (self) -> Imp","parent":{"krate":0,"index":256},"children":[],"decl_id":null,"docs":" Returns self as an `Imp` of a method.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":274},"span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,111,98,106,99,45,48,46,50,46,54,47,115,114,99,47,100,101,99,108,97,114,101,46,114,115],"byte_start":31232,"byte_end":31241,"line_start":113,"line_end":113,"column_start":12,"column_end":21},"name":"ClassDecl","qualname":"::declare::ClassDecl","value":"ClassDecl {  }","parent":null,"children":[{"krate":0,"index":149}],"decl_id":null,"docs":" A type for declaring a new class and adding new methods and ivars to it\n before registering it.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":280},"span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,111,98,106,99,45,48,46,50,46,54,47,115,114,99,47,100,101,99,108,97,114,101,46,114,115],"byte_start":31863,"byte_end":31866,"line_start":134,"line_end":134,"column_start":12,"column_end":15},"name":"new","qualname":"<ClassDecl>::new","value":"fn (name: &str, superclass: &Class) -> Option<ClassDecl>","parent":null,"children":[],"decl_id":null,"docs":" Constructs a `ClassDecl` with the given name and superclass.\n Returns `None` if the class couldn't be allocated.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":282},"span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,111,98,106,99,45,48,46,50,46,54,47,115,114,99,47,100,101,99,108,97,114,101,46,114,115],"byte_start":32617,"byte_end":32621,"line_start":151,"line_end":151,"column_start":12,"column_end":16},"name":"root","qualname":"<ClassDecl>::root","value":"fn (name: &str, intitialize_fn: extern \"C\" fn(&Class, Sel)) -> Option<ClassDecl>","parent":null,"children":[],"decl_id":null,"docs":"    Constructs a `ClassDecl` declaring a new root class with the given name.\n    Returns `None` if the class couldn't be allocated.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":284},"span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,111,98,106,99,45,48,46,50,46,54,47,115,114,99,47,100,101,99,108,97,114,101,46,114,115],"byte_start":33316,"byte_end":33326,"line_start":167,"line_end":167,"column_start":19,"column_end":29},"name":"add_method","qualname":"<ClassDecl>::add_method","value":"fn <F> (&mut self, sel: Sel, func: F) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Adds a method with the given name and implementation to self.\n Panics if the method wasn't sucessfully added\n or if the selector and function take different numbers of arguments.\n Unsafe because the caller must ensure that the types match those that\n are expected when the method is invoked from Objective-C.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":286},"span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,111,98,106,99,45,48,46,50,46,54,47,115,114,99,47,100,101,99,108,97,114,101,46,114,115],"byte_start":34302,"byte_end":34318,"line_start":188,"line_end":188,"column_start":19,"column_end":35},"name":"add_class_method","qualname":"<ClassDecl>::add_class_method","value":"fn <F> (&mut self, sel: Sel, func: F) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Adds a class method with the given name and implementation to self.\n Panics if the method wasn't sucessfully added\n or if the selector and function take different numbers of arguments.\n Unsafe because the caller must ensure that the types match those that\n are expected when the method is invoked from Objective-C.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":288},"span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,111,98,106,99,45,48,46,50,46,54,47,115,114,99,47,100,101,99,108,97,114,101,46,114,115],"byte_start":35133,"byte_end":35141,"line_start":207,"line_end":207,"column_start":12,"column_end":20},"name":"add_ivar","qualname":"<ClassDecl>::add_ivar","value":"fn <T> (&mut self, name: &str) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Adds an ivar with type `T` and the provided name to self.\n Panics if the ivar wasn't successfully added.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":290},"span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,111,98,106,99,45,48,46,50,46,54,47,115,114,99,47,100,101,99,108,97,114,101,46,114,115],"byte_start":35709,"byte_end":35721,"line_start":221,"line_end":221,"column_start":12,"column_end":24},"name":"add_protocol","qualname":"<ClassDecl>::add_protocol","value":"fn (&mut self, proto: &Protocol) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Adds a protocol to self. Panics if the protocol wasn't successfully\n added\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":292},"span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,111,98,106,99,45,48,46,50,46,54,47,115,114,99,47,100,101,99,108,97,114,101,46,114,115],"byte_start":36023,"byte_end":36031,"line_start":228,"line_end":228,"column_start":12,"column_end":20},"name":"register","qualname":"<ClassDecl>::register","value":"fn (self) -> &'static Class","parent":null,"children":[],"decl_id":null,"docs":" Registers self, consuming it and returning a reference to the\n newly registered `Class`.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":298},"span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,111,98,106,99,45,48,46,50,46,54,47,115,114,99,47,100,101,99,108,97,114,101,46,114,115],"byte_start":36545,"byte_end":36557,"line_start":249,"line_end":249,"column_start":12,"column_end":24},"name":"ProtocolDecl","qualname":"::declare::ProtocolDecl","value":"ProtocolDecl {  }","parent":null,"children":[{"krate":0,"index":159}],"decl_id":null,"docs":" A type for declaring a new protocol and adding new methods to it\n before registering it.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":302},"span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,111,98,106,99,45,48,46,50,46,54,47,115,114,99,47,100,101,99,108,97,114,101,46,114,115],"byte_start":36738,"byte_end":36741,"line_start":256,"line_end":256,"column_start":12,"column_end":15},"name":"new","qualname":"<ProtocolDecl>::new","value":"fn (name: &str) -> Option<ProtocolDecl>","parent":null,"children":[],"decl_id":null,"docs":" Constructs a `ProtocolDecl` with the given name. Returns `None` if the\n protocol couldn't be allocated.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":306},"span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,111,98,106,99,45,48,46,50,46,54,47,115,114,99,47,100,101,99,108,97,114,101,46,114,115],"byte_start":37862,"byte_end":37884,"line_start":287,"line_end":287,"column_start":12,"column_end":34},"name":"add_method_description","qualname":"<ProtocolDecl>::add_method_description","value":"fn <Args, Ret> (&mut self, sel: Sel, is_required: bool) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Adds an instance method declaration with a given description to self.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":308},"span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,111,98,106,99,45,48,46,50,46,54,47,115,114,99,47,100,101,99,108,97,114,101,46,114,115],"byte_start":38181,"byte_end":38209,"line_start":294,"line_end":294,"column_start":12,"column_end":40},"name":"add_class_method_description","qualname":"<ProtocolDecl>::add_class_method_description","value":"fn <Args, Ret> (&mut self, sel: Sel, is_required: bool) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Adds a class method declaration with a given description to self.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":310},"span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,111,98,106,99,45,48,46,50,46,54,47,115,114,99,47,100,101,99,108,97,114,101,46,114,115],"byte_start":38481,"byte_end":38493,"line_start":301,"line_end":301,"column_start":12,"column_end":24},"name":"add_protocol","qualname":"<ProtocolDecl>::add_protocol","value":"fn (&mut self, proto: &Protocol) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Adds a requirement on another protocol.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":312},"span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,111,98,106,99,45,48,46,50,46,54,47,115,114,99,47,100,101,99,108,97,114,101,46,114,115],"byte_start":38739,"byte_end":38747,"line_start":309,"line_end":309,"column_start":12,"column_end":20},"name":"register","qualname":"<ProtocolDecl>::register","value":"fn (self) -> &'static Protocol","parent":null,"children":[],"decl_id":null,"docs":" Registers self, consuming it and returning a reference to the\n newly registered `Protocol`.\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":314},"span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,111,98,106,99,45,48,46,50,46,54,47,115,114,99,47,114,99,47,109,111,100,46,114,115],"byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"rc","qualname":"::rc","value":"/Users/Kumar/.cargo/registry/src/github.com-1ecc6299db9ec823/objc-0.2.6/src/rc/mod.rs","parent":null,"children":[{"krate":0,"index":316},{"krate":0,"index":362},{"krate":0,"index":392},{"krate":0,"index":414},{"krate":0,"index":416},{"krate":0,"index":418}],"decl_id":null,"docs":"Utilities for reference counting Objective-C objects.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":332},"span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,111,98,106,99,45,48,46,50,46,54,47,115,114,99,47,114,99,47,115,116,114,111,110,103,46,114,115],"byte_start":43018,"byte_end":43027,"line_start":9,"line_end":9,"column_start":12,"column_end":21},"name":"StrongPtr","qualname":"::rc::strong::StrongPtr","value":"","parent":null,"children":[],"decl_id":null,"docs":" A pointer that strongly references an object, ensuring it won't be deallocated.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":336},"span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,111,98,106,99,45,48,46,50,46,54,47,115,114,99,47,114,99,47,115,116,114,111,110,103,46,114,115],"byte_start":43346,"byte_end":43349,"line_start":16,"line_end":16,"column_start":19,"column_end":22},"name":"new","qualname":"<StrongPtr>::new","value":"fn (ptr: *mut Object) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructs a `StrongPtr` to a newly created object that already has a\n +1 retain count. This will not retain the object.\n When dropped, the object will be released.\n Unsafe because the caller must ensure the given object pointer is valid.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":338},"span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,111,98,106,99,45,48,46,50,46,54,47,115,114,99,47,114,99,47,115,116,114,111,110,103,46,114,115],"byte_start":43627,"byte_end":43633,"line_start":23,"line_end":23,"column_start":19,"column_end":25},"name":"retain","qualname":"<StrongPtr>::retain","value":"fn (ptr: *mut Object) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Retains the given object and constructs a `StrongPtr` to it.\n When dropped, the object will be released.\n Unsafe because the caller must ensure the given object pointer is valid.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":340},"span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,111,98,106,99,45,48,46,50,46,54,47,115,114,99,47,114,99,47,115,116,114,111,110,103,46,114,115],"byte_start":43947,"byte_end":43958,"line_start":30,"line_end":30,"column_start":12,"column_end":23},"name":"autorelease","qualname":"<StrongPtr>::autorelease","value":"fn (self) -> *mut Object","parent":null,"children":[],"decl_id":null,"docs":" Autoreleases self, meaning that the object is not immediately released,\n but will be when the autorelease pool is drained. A pointer to the\n object is returned, but its validity is no longer ensured.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":342},"span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,111,98,106,99,45,48,46,50,46,54,47,115,114,99,47,114,99,47,115,116,114,111,110,103,46,114,115],"byte_start":44173,"byte_end":44177,"line_start":40,"line_end":40,"column_start":12,"column_end":16},"name":"weak","qualname":"<StrongPtr>::weak","value":"fn (&self) -> WeakPtr","parent":null,"children":[],"decl_id":null,"docs":" Returns a `WeakPtr` to self.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":376},"span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,111,98,106,99,45,48,46,50,46,54,47,115,114,99,47,114,99,47,119,101,97,107,46,114,115],"byte_start":45215,"byte_end":45222,"line_start":13,"line_end":13,"column_start":12,"column_end":19},"name":"WeakPtr","qualname":"::rc::weak::WeakPtr","value":"","parent":null,"children":[],"decl_id":null,"docs":" A pointer that weakly references an object, allowing to safely check\n whether it has been deallocated.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":380},"span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,111,98,106,99,45,48,46,50,46,54,47,115,114,99,47,114,99,47,119,101,97,107,46,114,115],"byte_start":45421,"byte_end":45424,"line_start":18,"line_end":18,"column_start":19,"column_end":22},"name":"new","qualname":"<WeakPtr>::new","value":"fn (obj: *mut Object) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructs a `WeakPtr` to the given object.\n Unsafe because the caller must ensure the given object pointer is valid.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":382},"span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,111,98,106,99,45,48,46,50,46,54,47,115,114,99,47,114,99,47,119,101,97,107,46,114,115],"byte_start":45747,"byte_end":45751,"line_start":26,"line_end":26,"column_start":12,"column_end":16},"name":"load","qualname":"<WeakPtr>::load","value":"fn (&self) -> StrongPtr","parent":null,"children":[],"decl_id":null,"docs":" Loads the object self points to, returning a `StrongPtr`.\n If the object has been deallocated, the returned pointer will be null.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":412},"span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,111,98,106,99,45,48,46,50,46,54,47,115,114,99,47,114,99,47,97,117,116,111,114,101,108,101,97,115,101,46,114,115],"byte_start":46962,"byte_end":46977,"line_start":27,"line_end":27,"column_start":8,"column_end":23},"name":"autoreleasepool","qualname":"::rc::autorelease::autoreleasepool","value":"fn <T, F> (f: F) -> T","parent":null,"children":[],"decl_id":null,"docs":"Execute `f` in the context of a new autorelease pool. The pool is drained\nafter the execution of `f` completes.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":450},"span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,111,98,106,99,45,48,46,50,46,54,47,115,114,99,47,101,110,99,111,100,101,46,114,115],"byte_start":47895,"byte_end":47903,"line_start":36,"line_end":36,"column_start":12,"column_end":20},"name":"Encoding","qualname":"::encode::Encoding","value":"Encoding {  }","parent":null,"children":[{"krate":0,"index":207}],"decl_id":null,"docs":" An Objective-C type encoding.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":454},"span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,111,98,106,99,45,48,46,50,46,54,47,115,114,99,47,101,110,99,111,100,101,46,114,115],"byte_start":48102,"byte_end":48110,"line_start":43,"line_end":43,"column_start":19,"column_end":27},"name":"from_str","qualname":"<Encoding>::from_str","value":"fn (code: &str) -> Encoding","parent":null,"children":[],"decl_id":null,"docs":" Constructs an `Encoding` from its string representation.\n Unsafe because the caller must ensure the string is a valid encoding.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":456},"span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,111,98,106,99,45,48,46,50,46,54,47,115,114,99,47,101,110,99,111,100,101,46,114,115],"byte_start":48211,"byte_end":48217,"line_start":48,"line_end":48,"column_start":12,"column_end":18},"name":"as_str","qualname":"<Encoding>::as_str","value":"fn (&self) -> &str","parent":null,"children":[],"decl_id":null,"docs":" Returns self as a `str`.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":476},"span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,111,98,106,99,45,48,46,50,46,54,47,115,114,99,47,101,110,99,111,100,101,46,114,115],"byte_start":50256,"byte_end":50262,"line_start":116,"line_end":116,"column_start":18,"column_end":24},"name":"Encode","qualname":"::encode::Encode","value":"Encode","parent":null,"children":[{"krate":0,"index":478}],"decl_id":null,"docs":" Types that have an Objective-C type encoding.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":478},"span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,111,98,106,99,45,48,46,50,46,54,47,115,114,99,47,101,110,99,111,100,101,46,114,115],"byte_start":50328,"byte_end":50334,"line_start":118,"line_end":118,"column_start":8,"column_end":14},"name":"encode","qualname":"::encode::Encode::encode","value":"fn () -> Encoding","parent":{"krate":0,"index":476},"children":[],"decl_id":null,"docs":" Returns the Objective-C type encoding for Self.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":492},"span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,111,98,106,99,45,48,46,50,46,54,47,115,114,99,47,101,110,99,111,100,101,46,114,115],"byte_start":52502,"byte_end":52517,"line_start":202,"line_end":202,"column_start":11,"column_end":26},"name":"EncodeArguments","qualname":"::encode::EncodeArguments","value":"EncodeArguments","parent":null,"children":[{"krate":0,"index":494},{"krate":0,"index":496}],"decl_id":null,"docs":" Types that represent a group of arguments, where each has an Objective-C\n type encoding.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":494},"span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,111,98,106,99,45,48,46,50,46,54,47,115,114,99,47,101,110,99,111,100,101,46,114,115],"byte_start":52596,"byte_end":52600,"line_start":204,"line_end":204,"column_start":10,"column_end":14},"name":"Encs","qualname":"::encode::EncodeArguments::Encs","value":"type Encs: AsRef<[Encoding]>;","parent":{"krate":0,"index":492},"children":[],"decl_id":null,"docs":" The type as which the encodings for Self will be returned.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":496},"span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,111,98,106,99,45,48,46,50,46,54,47,115,114,99,47,101,110,99,111,100,101,46,114,115],"byte_start":52686,"byte_end":52695,"line_start":207,"line_end":207,"column_start":8,"column_end":17},"name":"encodings","qualname":"::encode::EncodeArguments::encodings","value":"fn () -> Self::Encs","parent":{"krate":0,"index":492},"children":[],"decl_id":null,"docs":" Returns the Objective-C type encodings for Self.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":604},"span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,111,98,106,99,45,48,46,50,46,54,47,115,114,99,47,109,101,115,115,97,103,101,47,109,111,100,46,114,115],"byte_start":55928,"byte_end":55935,"line_start":50,"line_end":50,"column_start":18,"column_end":25},"name":"Message","qualname":"::message::Message","value":"Message","parent":null,"children":[{"krate":0,"index":606},{"krate":0,"index":608}],"decl_id":null,"docs":" Types that may be sent Objective-C messages.\n For example: objects, classes, and blocks.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":606},"span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,111,98,106,99,45,48,46,50,46,54,47,115,114,99,47,109,101,115,115,97,103,101,47,109,111,100,46,114,115],"byte_start":56482,"byte_end":56494,"line_start":62,"line_end":62,"column_start":15,"column_end":27},"name":"send_message","qualname":"::message::Message::send_message","value":"fn <A, R> (&self, sel: Sel, args: A) -> Result<R, MessageError>","parent":{"krate":0,"index":604},"children":[],"decl_id":null,"docs":"    Sends a message to self with the given selector and arguments.","sig":null,"attributes":[{"value":"cfg(not(feature = \"verify_message\"))","span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,111,98,106,99,45,48,46,50,46,54,47,115,114,99,47,109,101,115,115,97,103,101,47,109,111,100,46,114,115],"byte_start":56428,"byte_end":56467,"line_start":61,"line_end":61,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":608},"span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,111,98,106,99,45,48,46,50,46,54,47,115,114,99,47,109,101,115,115,97,103,101,47,109,111,100,46,114,115],"byte_start":57713,"byte_end":57727,"line_start":99,"line_end":99,"column_start":8,"column_end":22},"name":"verify_message","qualname":"::message::Message::verify_message","value":"fn <A, R> (&self, sel: Sel) -> Result<(), MessageError>","parent":{"krate":0,"index":604},"children":[],"decl_id":null,"docs":"    Verifies that the argument and return types match the encoding of the\n    method for the given selector.","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":614},"span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,111,98,106,99,45,48,46,50,46,54,47,115,114,99,47,109,101,115,115,97,103,101,47,109,111,100,46,114,115],"byte_start":58130,"byte_end":58146,"line_start":111,"line_end":111,"column_start":11,"column_end":27},"name":"MessageArguments","qualname":"::message::MessageArguments","value":"MessageArguments: Sized","parent":null,"children":[{"krate":0,"index":616}],"decl_id":null,"docs":" Types that may be used as the arguments of an Objective-C message.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":616},"span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,111,98,106,99,45,48,46,50,46,54,47,115,114,99,47,109,101,115,115,97,103,101,47,109,111,100,46,114,115],"byte_start":58474,"byte_end":58480,"line_start":117,"line_end":117,"column_start":15,"column_end":21},"name":"invoke","qualname":"::message::MessageArguments::invoke","value":"fn <R> (imp: Imp, obj: *mut Object, sel: Sel, args: Self) -> R","parent":{"krate":0,"index":614},"children":[],"decl_id":null,"docs":" Invoke an `Imp` with the given object, selector, and arguments.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1142},"span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,111,98,106,99,45,48,46,50,46,54,47,115,114,99,47,109,101,115,115,97,103,101,47,109,111,100,46,114,115],"byte_start":60079,"byte_end":60091,"line_start":158,"line_end":158,"column_start":12,"column_end":24},"name":"MessageError","qualname":"::message::MessageError","value":"","parent":null,"children":[],"decl_id":null,"docs":"An error encountered while attempting to send a message.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":628},"span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,111,98,106,99,45,48,46,50,46,54,47,115,114,99,47,109,101,115,115,97,103,101,47,109,111,100,46,114,115],"byte_start":60423,"byte_end":60435,"line_start":175,"line_end":175,"column_start":15,"column_end":27},"name":"send_message","qualname":"::message::send_message","value":"fn <T, A, R> (obj: *const T, sel: Sel, args: A) -> Result<R, MessageError>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,111,98,106,99,45,48,46,50,46,54,47,115,114,99,47,109,101,115,115,97,103,101,47,109,111,100,46,114,115],"byte_start":60351,"byte_end":60368,"line_start":173,"line_end":173,"column_start":1,"column_end":18}},{"value":"cfg(not(feature = \"verify_message\"))","span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,111,98,106,99,45,48,46,50,46,54,47,115,114,99,47,109,101,115,115,97,103,101,47,109,111,100,46,114,115],"byte_start":60369,"byte_end":60408,"line_start":174,"line_end":174,"column_start":1,"column_end":40}}]},{"kind":"Function","id":{"krate":0,"index":630},"span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,111,98,106,99,45,48,46,50,46,54,47,115,114,99,47,109,101,115,115,97,103,101,47,109,111,100,46,114,115],"byte_start":61241,"byte_end":61259,"line_start":202,"line_end":202,"column_start":15,"column_end":33},"name":"send_super_message","qualname":"::message::send_super_message","value":"fn <T, A, R> (obj: *const T, superclass: &Class, sel: Sel, args: A) -> Result<R, MessageError>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,111,98,106,99,45,48,46,50,46,54,47,115,114,99,47,109,101,115,115,97,103,101,47,109,111,100,46,114,115],"byte_start":61169,"byte_end":61186,"line_start":200,"line_end":200,"column_start":1,"column_end":18}},{"value":"cfg(not(feature = \"verify_message\"))","span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,111,98,106,99,45,48,46,50,46,54,47,115,114,99,47,109,101,115,115,97,103,101,47,109,111,100,46,114,115],"byte_start":61187,"byte_end":61226,"line_start":201,"line_end":201,"column_start":1,"column_end":40}}]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,111,98,106,99,45,48,46,50,46,54,47,115,114,99,47,114,117,110,116,105,109,101,46,114,115],"byte_start":13105,"byte_end":13108,"line_start":145,"line_end":145,"column_start":6,"column_end":9},"value":"","parent":null,"children":[{"krate":0,"index":98},{"krate":0,"index":100},{"krate":0,"index":102},{"krate":0,"index":104}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,111,98,106,99,45,48,46,50,46,54,47,115,114,99,47,114,117,110,116,105,109,101,46,114,115],"byte_start":14070,"byte_end":14073,"line_start":180,"line_end":180,"column_start":20,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":108}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,111,98,106,99,45,48,46,50,46,54,47,115,114,99,47,114,117,110,116,105,109,101,46,114,115],"byte_start":14167,"byte_end":14170,"line_start":186,"line_end":186,"column_start":13,"column_end":16},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,111,98,106,99,45,48,46,50,46,54,47,115,114,99,47,114,117,110,116,105,109,101,46,114,115],"byte_start":14260,"byte_end":14263,"line_start":189,"line_end":189,"column_start":22,"column_end":25},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,111,98,106,99,45,48,46,50,46,54,47,115,114,99,47,114,117,110,116,105,109,101,46,114,115],"byte_start":14289,"byte_end":14292,"line_start":190,"line_end":190,"column_start":22,"column_end":25},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,111,98,106,99,45,48,46,50,46,54,47,115,114,99,47,114,117,110,116,105,109,101,46,114,115],"byte_start":14312,"byte_end":14315,"line_start":192,"line_end":192,"column_start":15,"column_end":18},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,111,98,106,99,45,48,46,50,46,54,47,115,114,99,47,114,117,110,116,105,109,101,46,114,115],"byte_start":14336,"byte_end":14339,"line_start":194,"line_end":194,"column_start":16,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":120}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,111,98,106,99,45,48,46,50,46,54,47,115,114,99,47,114,117,110,116,105,109,101,46,114,115],"byte_start":14402,"byte_end":14405,"line_start":198,"line_end":198,"column_start":21,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":124}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Inherent","span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,111,98,106,99,45,48,46,50,46,54,47,115,114,99,47,114,117,110,116,105,109,101,46,114,115],"byte_start":14518,"byte_end":14522,"line_start":204,"line_end":204,"column_start":6,"column_end":10},"value":"","parent":null,"children":[{"krate":0,"index":128},{"krate":0,"index":130},{"krate":0,"index":132}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Inherent","span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,111,98,106,99,45,48,46,50,46,54,47,115,114,99,47,114,117,110,116,105,109,101,46,114,115],"byte_start":15199,"byte_end":15205,"line_start":231,"line_end":231,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":136},{"krate":0,"index":138},{"krate":0,"index":140},{"krate":0,"index":142},{"krate":0,"index":144}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Inherent","span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,111,98,106,99,45,48,46,50,46,54,47,115,114,99,47,114,117,110,116,105,109,101,46,114,115],"byte_start":16392,"byte_end":16397,"line_start":275,"line_end":275,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":148},{"krate":0,"index":150},{"krate":0,"index":152},{"krate":0,"index":154},{"krate":0,"index":156},{"krate":0,"index":158},{"krate":0,"index":160},{"krate":0,"index":162},{"krate":0,"index":164},{"krate":0,"index":166},{"krate":0,"index":168},{"krate":0,"index":170},{"krate":0,"index":172}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,111,98,106,99,45,48,46,50,46,54,47,115,114,99,47,114,117,110,116,105,109,101,46,114,115],"byte_start":20211,"byte_end":20216,"line_start":387,"line_end":387,"column_start":20,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":176}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,111,98,106,99,45,48,46,50,46,54,47,115,114,99,47,114,117,110,116,105,109,101,46,114,115],"byte_start":20400,"byte_end":20405,"line_start":395,"line_end":395,"column_start":13,"column_end":18},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,111,98,106,99,45,48,46,50,46,54,47,115,114,99,47,114,117,110,116,105,109,101,46,114,115],"byte_start":20431,"byte_end":20436,"line_start":397,"line_end":397,"column_start":21,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":182}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Inherent","span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,111,98,106,99,45,48,46,50,46,54,47,115,114,99,47,114,117,110,116,105,109,101,46,114,115],"byte_start":20549,"byte_end":20557,"line_start":403,"line_end":403,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":186},{"krate":0,"index":188},{"krate":0,"index":190},{"krate":0,"index":192},{"krate":0,"index":194}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,111,98,106,99,45,48,46,50,46,54,47,115,114,99,47,114,117,110,116,105,109,101,46,114,115],"byte_start":22095,"byte_end":22103,"line_start":446,"line_end":446,"column_start":20,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":198}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,111,98,106,99,45,48,46,50,46,54,47,115,114,99,47,114,117,110,116,105,109,101,46,114,115],"byte_start":22228,"byte_end":22236,"line_start":452,"line_end":452,"column_start":13,"column_end":21},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,111,98,106,99,45,48,46,50,46,54,47,115,114,99,47,114,117,110,116,105,109,101,46,114,115],"byte_start":22262,"byte_end":22270,"line_start":454,"line_end":454,"column_start":21,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":204}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Inherent","span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,111,98,106,99,45,48,46,50,46,54,47,115,114,99,47,114,117,110,116,105,109,101,46,114,115],"byte_start":22383,"byte_end":22389,"line_start":460,"line_end":460,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":208},{"krate":0,"index":210},{"krate":0,"index":212},{"krate":0,"index":214}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,111,98,106,99,45,48,46,50,46,54,47,115,114,99,47,114,117,110,116,105,109,101,46,114,115],"byte_start":24573,"byte_end":24579,"line_start":523,"line_end":523,"column_start":21,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":218}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Inherent","span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,111,98,106,99,45,48,46,50,46,54,47,115,114,99,47,100,101,99,108,97,114,101,46,114,115],"byte_start":31273,"byte_end":31282,"line_start":117,"line_end":117,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":278},{"krate":0,"index":280},{"krate":0,"index":282},{"krate":0,"index":284},{"krate":0,"index":286},{"krate":0,"index":288},{"krate":0,"index":290},{"krate":0,"index":292}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,111,98,106,99,45,48,46,50,46,54,47,115,114,99,47,100,101,99,108,97,114,101,46,114,115],"byte_start":36311,"byte_end":36320,"line_start":239,"line_end":239,"column_start":15,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":296}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Inherent","span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,111,98,106,99,45,48,46,50,46,54,47,115,114,99,47,100,101,99,108,97,114,101,46,114,115],"byte_start":36593,"byte_end":36605,"line_start":253,"line_end":253,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":302},{"krate":0,"index":304},{"krate":0,"index":306},{"krate":0,"index":308},{"krate":0,"index":310},{"krate":0,"index":312}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Inherent","span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,111,98,106,99,45,48,46,50,46,54,47,115,114,99,47,114,99,47,115,116,114,111,110,103,46,114,115],"byte_start":43048,"byte_end":43057,"line_start":11,"line_end":11,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":336},{"krate":0,"index":338},{"krate":0,"index":340},{"krate":0,"index":342}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,111,98,106,99,45,48,46,50,46,54,47,115,114,99,47,114,99,47,115,116,114,111,110,103,46,114,115],"byte_start":44261,"byte_end":44270,"line_start":45,"line_end":45,"column_start":15,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":346}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,111,98,106,99,45,48,46,50,46,54,47,115,114,99,47,114,99,47,115,116,114,111,110,103,46,114,115],"byte_start":44392,"byte_end":44401,"line_start":53,"line_end":53,"column_start":16,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":350}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,111,98,106,99,45,48,46,50,46,54,47,115,114,99,47,114,99,47,115,116,114,111,110,103,46,114,115],"byte_start":44528,"byte_end":44537,"line_start":61,"line_end":61,"column_start":16,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":354},{"krate":0,"index":356}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,111,98,106,99,45,48,46,50,46,54,47,115,114,99,47,114,99,47,115,116,114,111,110,103,46,114,115],"byte_start":44657,"byte_end":44666,"line_start":69,"line_end":69,"column_start":23,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":360}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Inherent","span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,111,98,106,99,45,48,46,50,46,54,47,115,114,99,47,114,99,47,119,101,97,107,46,114,115],"byte_start":45260,"byte_end":45267,"line_start":15,"line_end":15,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":380},{"krate":0,"index":382}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,111,98,106,99,45,48,46,50,46,54,47,115,114,99,47,114,99,47,119,101,97,107,46,114,115],"byte_start":45924,"byte_end":45931,"line_start":34,"line_end":34,"column_start":15,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":386}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,111,98,106,99,45,48,46,50,46,54,47,115,114,99,47,114,99,47,119,101,97,107,46,114,115],"byte_start":46063,"byte_end":46070,"line_start":42,"line_end":42,"column_start":16,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":390}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Inherent","span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,111,98,106,99,45,48,46,50,46,54,47,115,114,99,47,114,99,47,97,117,116,111,114,101,108,101,97,115,101,46,114,115],"byte_start":46513,"byte_end":46530,"line_start":9,"line_end":9,"column_start":6,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":406}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,111,98,106,99,45,48,46,50,46,54,47,115,114,99,47,114,99,47,97,117,116,111,114,101,108,101,97,115,101,46,114,115],"byte_start":46652,"byte_end":46669,"line_start":15,"line_end":15,"column_start":15,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":410}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Inherent","span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,111,98,106,99,45,48,46,50,46,54,47,115,114,99,47,101,110,99,111,100,101,46,114,115],"byte_start":47930,"byte_end":47938,"line_start":40,"line_end":40,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":454},{"krate":0,"index":456}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,111,98,106,99,45,48,46,50,46,54,47,115,114,99,47,101,110,99,111,100,101,46,114,115],"byte_start":48635,"byte_end":48643,"line_start":62,"line_end":62,"column_start":16,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":460}],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,111,98,106,99,45,48,46,50,46,54,47,115,114,99,47,101,110,99,111,100,101,46,114,115],"byte_start":48852,"byte_end":48860,"line_start":72,"line_end":72,"column_start":20,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":464}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,111,98,106,99,45,48,46,50,46,54,47,115,114,99,47,101,110,99,111,100,101,46,114,115],"byte_start":49118,"byte_end":49126,"line_start":81,"line_end":81,"column_start":21,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":468}],"docs":"","sig":null,"attributes":[]},{"id":51,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,111,98,106,99,45,48,46,50,46,54,47,115,114,99,47,109,101,115,115,97,103,101,47,109,111,100,46,114,115],"byte_start":58002,"byte_end":58008,"line_start":106,"line_end":106,"column_start":25,"column_end":31},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,111,98,106,99,45,48,46,50,46,54,47,115,114,99,47,109,101,115,115,97,103,101,47,109,111,100,46,114,115],"byte_start":58038,"byte_end":58043,"line_start":108,"line_end":108,"column_start":25,"column_end":30},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":53,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,111,98,106,99,45,48,46,50,46,54,47,115,114,99,47,109,101,115,115,97,103,101,47,109,111,100,46,114,115],"byte_start":60124,"byte_end":60136,"line_start":160,"line_end":160,"column_start":23,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":622}],"docs":"","sig":null,"attributes":[]},{"id":54,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,111,98,106,99,45,48,46,50,46,54,47,115,114,99,47,109,101,115,115,97,103,101,47,109,111,100,46,114,115],"byte_start":60260,"byte_end":60272,"line_start":166,"line_end":166,"column_start":16,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":626}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,111,98,106,99,45,48,46,50,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2469,"byte_end":2476,"line_start":81,"line_end":81,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":38}},{"kind":"Mod","span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,111,98,106,99,45,48,46,50,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2486,"byte_end":2493,"line_start":82,"line_end":82,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":220}},{"kind":"Mod","span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,111,98,106,99,45,48,46,50,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2503,"byte_end":2505,"line_start":83,"line_end":83,"column_start":9,"column_end":11},"ref_id":{"krate":0,"index":314}}],"macro_refs":[],"relations":[{"span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,111,98,106,99,45,48,46,50,46,54,47,115,114,99,47,114,117,110,116,105,109,101,46,114,115],"byte_start":13105,"byte_end":13108,"line_start":145,"line_end":145,"column_start":6,"column_end":9},"kind":{"variant":"Impl","fields":[0]},"from":{"krate":0,"index":78},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,111,98,106,99,45,48,46,50,46,54,47,115,114,99,47,114,117,110,116,105,109,101,46,114,115],"byte_start":14070,"byte_end":14073,"line_start":180,"line_end":180,"column_start":20,"column_end":23},"kind":{"variant":"Impl","fields":[1]},"from":{"krate":0,"index":78},"to":{"krate":2,"index":2410}},{"span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,111,98,106,99,45,48,46,50,46,54,47,115,114,99,47,114,117,110,116,105,109,101,46,114,115],"byte_start":14167,"byte_end":14170,"line_start":186,"line_end":186,"column_start":13,"column_end":16},"kind":{"variant":"Impl","fields":[2]},"from":{"krate":0,"index":78},"to":{"krate":2,"index":2416}},{"span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,111,98,106,99,45,48,46,50,46,54,47,115,114,99,47,114,117,110,116,105,109,101,46,114,115],"byte_start":14260,"byte_end":14263,"line_start":189,"line_end":189,"column_start":22,"column_end":25},"kind":{"variant":"Impl","fields":[3]},"from":{"krate":0,"index":78},"to":{"krate":2,"index":1712}},{"span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,111,98,106,99,45,48,46,50,46,54,47,115,114,99,47,114,117,110,116,105,109,101,46,114,115],"byte_start":14289,"byte_end":14292,"line_start":190,"line_end":190,"column_start":22,"column_end":25},"kind":{"variant":"Impl","fields":[4]},"from":{"krate":0,"index":78},"to":{"krate":2,"index":1700}},{"span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,111,98,106,99,45,48,46,50,46,54,47,115,114,99,47,114,117,110,116,105,109,101,46,114,115],"byte_start":14312,"byte_end":14315,"line_start":192,"line_end":192,"column_start":15,"column_end":18},"kind":{"variant":"Impl","fields":[5]},"from":{"krate":0,"index":78},"to":{"krate":2,"index":1710}},{"span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,111,98,106,99,45,48,46,50,46,54,47,115,114,99,47,114,117,110,116,105,109,101,46,114,115],"byte_start":14336,"byte_end":14339,"line_start":194,"line_end":194,"column_start":16,"column_end":19},"kind":{"variant":"Impl","fields":[6]},"from":{"krate":0,"index":78},"to":{"krate":2,"index":2598}},{"span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,111,98,106,99,45,48,46,50,46,54,47,115,114,99,47,114,117,110,116,105,109,101,46,114,115],"byte_start":14402,"byte_end":14405,"line_start":198,"line_end":198,"column_start":21,"column_end":24},"kind":{"variant":"Impl","fields":[7]},"from":{"krate":0,"index":78},"to":{"krate":2,"index":8426}},{"span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,111,98,106,99,45,48,46,50,46,54,47,115,114,99,47,114,117,110,116,105,109,101,46,114,115],"byte_start":14518,"byte_end":14522,"line_start":204,"line_end":204,"column_start":6,"column_end":10},"kind":{"variant":"Impl","fields":[8]},"from":{"krate":0,"index":82},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,111,98,106,99,45,48,46,50,46,54,47,115,114,99,47,114,117,110,116,105,109,101,46,114,115],"byte_start":15199,"byte_end":15205,"line_start":231,"line_end":231,"column_start":6,"column_end":12},"kind":{"variant":"Impl","fields":[9]},"from":{"krate":0,"index":84},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,111,98,106,99,45,48,46,50,46,54,47,115,114,99,47,114,117,110,116,105,109,101,46,114,115],"byte_start":16392,"byte_end":16397,"line_start":275,"line_end":275,"column_start":6,"column_end":11},"kind":{"variant":"Impl","fields":[10]},"from":{"krate":0,"index":86},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,111,98,106,99,45,48,46,50,46,54,47,115,114,99,47,114,117,110,116,105,109,101,46,114,115],"byte_start":20211,"byte_end":20216,"line_start":387,"line_end":387,"column_start":20,"column_end":25},"kind":{"variant":"Impl","fields":[11]},"from":{"krate":0,"index":86},"to":{"krate":2,"index":2410}},{"span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,111,98,106,99,45,48,46,50,46,54,47,115,114,99,47,114,117,110,116,105,109,101,46,114,115],"byte_start":20400,"byte_end":20405,"line_start":395,"line_end":395,"column_start":13,"column_end":18},"kind":{"variant":"Impl","fields":[12]},"from":{"krate":0,"index":86},"to":{"krate":2,"index":2416}},{"span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,111,98,106,99,45,48,46,50,46,54,47,115,114,99,47,114,117,110,116,105,109,101,46,114,115],"byte_start":20431,"byte_end":20436,"line_start":397,"line_end":397,"column_start":21,"column_end":26},"kind":{"variant":"Impl","fields":[13]},"from":{"krate":0,"index":86},"to":{"krate":2,"index":8426}},{"span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,111,98,106,99,45,48,46,50,46,54,47,115,114,99,47,114,117,110,116,105,109,101,46,114,115],"byte_start":20549,"byte_end":20557,"line_start":403,"line_end":403,"column_start":6,"column_end":14},"kind":{"variant":"Impl","fields":[14]},"from":{"krate":0,"index":88},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,111,98,106,99,45,48,46,50,46,54,47,115,114,99,47,114,117,110,116,105,109,101,46,114,115],"byte_start":22095,"byte_end":22103,"line_start":446,"line_end":446,"column_start":20,"column_end":28},"kind":{"variant":"Impl","fields":[15]},"from":{"krate":0,"index":88},"to":{"krate":2,"index":2410}},{"span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,111,98,106,99,45,48,46,50,46,54,47,115,114,99,47,114,117,110,116,105,109,101,46,114,115],"byte_start":22228,"byte_end":22236,"line_start":452,"line_end":452,"column_start":13,"column_end":21},"kind":{"variant":"Impl","fields":[16]},"from":{"krate":0,"index":88},"to":{"krate":2,"index":2416}},{"span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,111,98,106,99,45,48,46,50,46,54,47,115,114,99,47,114,117,110,116,105,109,101,46,114,115],"byte_start":22262,"byte_end":22270,"line_start":454,"line_end":454,"column_start":21,"column_end":29},"kind":{"variant":"Impl","fields":[17]},"from":{"krate":0,"index":88},"to":{"krate":2,"index":8426}},{"span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,111,98,106,99,45,48,46,50,46,54,47,115,114,99,47,114,117,110,116,105,109,101,46,114,115],"byte_start":22383,"byte_end":22389,"line_start":460,"line_end":460,"column_start":6,"column_end":12},"kind":{"variant":"Impl","fields":[18]},"from":{"krate":0,"index":90},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,111,98,106,99,45,48,46,50,46,54,47,115,114,99,47,114,117,110,116,105,109,101,46,114,115],"byte_start":24573,"byte_end":24579,"line_start":523,"line_end":523,"column_start":21,"column_end":27},"kind":{"variant":"Impl","fields":[19]},"from":{"krate":0,"index":90},"to":{"krate":2,"index":8426}},{"span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,111,98,106,99,45,48,46,50,46,54,47,115,114,99,47,100,101,99,108,97,114,101,46,114,115],"byte_start":31273,"byte_end":31282,"line_start":117,"line_end":117,"column_start":6,"column_end":15},"kind":{"variant":"Impl","fields":[20]},"from":{"krate":0,"index":274},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,111,98,106,99,45,48,46,50,46,54,47,115,114,99,47,100,101,99,108,97,114,101,46,114,115],"byte_start":36311,"byte_end":36320,"line_start":239,"line_end":239,"column_start":15,"column_end":24},"kind":{"variant":"Impl","fields":[21]},"from":{"krate":0,"index":274},"to":{"krate":2,"index":1978}},{"span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,111,98,106,99,45,48,46,50,46,54,47,115,114,99,47,100,101,99,108,97,114,101,46,114,115],"byte_start":36593,"byte_end":36605,"line_start":253,"line_end":253,"column_start":6,"column_end":18},"kind":{"variant":"Impl","fields":[22]},"from":{"krate":0,"index":298},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,111,98,106,99,45,48,46,50,46,54,47,115,114,99,47,114,99,47,115,116,114,111,110,103,46,114,115],"byte_start":43048,"byte_end":43057,"line_start":11,"line_end":11,"column_start":6,"column_end":15},"kind":{"variant":"Impl","fields":[23]},"from":{"krate":0,"index":332},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,111,98,106,99,45,48,46,50,46,54,47,115,114,99,47,114,99,47,115,116,114,111,110,103,46,114,115],"byte_start":44261,"byte_end":44270,"line_start":45,"line_end":45,"column_start":15,"column_end":24},"kind":{"variant":"Impl","fields":[24]},"from":{"krate":0,"index":332},"to":{"krate":2,"index":1978}},{"span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,111,98,106,99,45,48,46,50,46,54,47,115,114,99,47,114,99,47,115,116,114,111,110,103,46,114,115],"byte_start":44392,"byte_end":44401,"line_start":53,"line_end":53,"column_start":16,"column_end":25},"kind":{"variant":"Impl","fields":[25]},"from":{"krate":0,"index":332},"to":{"krate":2,"index":2598}},{"span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,111,98,106,99,45,48,46,50,46,54,47,115,114,99,47,114,99,47,115,116,114,111,110,103,46,114,115],"byte_start":44528,"byte_end":44537,"line_start":61,"line_end":61,"column_start":16,"column_end":25},"kind":{"variant":"Impl","fields":[26]},"from":{"krate":0,"index":332},"to":{"krate":2,"index":1944}},{"span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,111,98,106,99,45,48,46,50,46,54,47,115,114,99,47,114,99,47,115,116,114,111,110,103,46,114,115],"byte_start":44657,"byte_end":44666,"line_start":69,"line_end":69,"column_start":23,"column_end":32},"kind":{"variant":"Impl","fields":[27]},"from":{"krate":0,"index":332},"to":{"krate":2,"index":8450}},{"span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,111,98,106,99,45,48,46,50,46,54,47,115,114,99,47,114,99,47,119,101,97,107,46,114,115],"byte_start":45260,"byte_end":45267,"line_start":15,"line_end":15,"column_start":6,"column_end":13},"kind":{"variant":"Impl","fields":[28]},"from":{"krate":0,"index":376},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,111,98,106,99,45,48,46,50,46,54,47,115,114,99,47,114,99,47,119,101,97,107,46,114,115],"byte_start":45924,"byte_end":45931,"line_start":34,"line_end":34,"column_start":15,"column_end":22},"kind":{"variant":"Impl","fields":[29]},"from":{"krate":0,"index":376},"to":{"krate":2,"index":1978}},{"span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,111,98,106,99,45,48,46,50,46,54,47,115,114,99,47,114,99,47,119,101,97,107,46,114,115],"byte_start":46063,"byte_end":46070,"line_start":42,"line_end":42,"column_start":16,"column_end":23},"kind":{"variant":"Impl","fields":[30]},"from":{"krate":0,"index":376},"to":{"krate":2,"index":2598}},{"span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,111,98,106,99,45,48,46,50,46,54,47,115,114,99,47,114,99,47,97,117,116,111,114,101,108,101,97,115,101,46,114,115],"byte_start":46513,"byte_end":46530,"line_start":9,"line_end":9,"column_start":6,"column_end":23},"kind":{"variant":"Impl","fields":[31]},"from":{"krate":0,"index":402},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,111,98,106,99,45,48,46,50,46,54,47,115,114,99,47,114,99,47,97,117,116,111,114,101,108,101,97,115,101,46,114,115],"byte_start":46652,"byte_end":46669,"line_start":15,"line_end":15,"column_start":15,"column_end":32},"kind":{"variant":"Impl","fields":[32]},"from":{"krate":0,"index":402},"to":{"krate":2,"index":1978}},{"span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,111,98,106,99,45,48,46,50,46,54,47,115,114,99,47,101,110,99,111,100,101,46,114,115],"byte_start":47930,"byte_end":47938,"line_start":40,"line_end":40,"column_start":6,"column_end":14},"kind":{"variant":"Impl","fields":[33]},"from":{"krate":0,"index":450},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,111,98,106,99,45,48,46,50,46,54,47,115,114,99,47,101,110,99,111,100,101,46,114,115],"byte_start":48635,"byte_end":48643,"line_start":62,"line_end":62,"column_start":16,"column_end":24},"kind":{"variant":"Impl","fields":[34]},"from":{"krate":0,"index":450},"to":{"krate":2,"index":2598}},{"span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,111,98,106,99,45,48,46,50,46,54,47,115,114,99,47,101,110,99,111,100,101,46,114,115],"byte_start":48852,"byte_end":48860,"line_start":72,"line_end":72,"column_start":20,"column_end":28},"kind":{"variant":"Impl","fields":[35]},"from":{"krate":0,"index":450},"to":{"krate":2,"index":2410}},{"span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,111,98,106,99,45,48,46,50,46,54,47,115,114,99,47,101,110,99,111,100,101,46,114,115],"byte_start":49118,"byte_end":49126,"line_start":81,"line_end":81,"column_start":21,"column_end":29},"kind":{"variant":"Impl","fields":[36]},"from":{"krate":0,"index":450},"to":{"krate":2,"index":8426}},{"span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,111,98,106,99,45,48,46,50,46,54,47,115,114,99,47,109,101,115,115,97,103,101,47,109,111,100,46,114,115],"byte_start":58002,"byte_end":58008,"line_start":106,"line_end":106,"column_start":25,"column_end":31},"kind":{"variant":"Impl","fields":[51]},"from":{"krate":0,"index":90},"to":{"krate":0,"index":604}},{"span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,111,98,106,99,45,48,46,50,46,54,47,115,114,99,47,109,101,115,115,97,103,101,47,109,111,100,46,114,115],"byte_start":58038,"byte_end":58043,"line_start":108,"line_end":108,"column_start":25,"column_end":30},"kind":{"variant":"Impl","fields":[52]},"from":{"krate":0,"index":86},"to":{"krate":0,"index":604}},{"span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,111,98,106,99,45,48,46,50,46,54,47,115,114,99,47,109,101,115,115,97,103,101,47,109,111,100,46,114,115],"byte_start":58148,"byte_end":58153,"line_start":111,"line_end":111,"column_start":29,"column_end":34},"kind":"SuperTrait","from":{"krate":2,"index":1706},"to":{"krate":0,"index":614}},{"span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,111,98,106,99,45,48,46,50,46,54,47,115,114,99,47,109,101,115,115,97,103,101,47,109,111,100,46,114,115],"byte_start":60124,"byte_end":60136,"line_start":160,"line_end":160,"column_start":23,"column_end":35},"kind":{"variant":"Impl","fields":[53]},"from":{"krate":0,"index":1142},"to":{"krate":2,"index":8430}},{"span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,111,98,106,99,45,48,46,50,46,54,47,115,114,99,47,109,101,115,115,97,103,101,47,109,111,100,46,114,115],"byte_start":60260,"byte_end":60272,"line_start":166,"line_end":166,"column_start":16,"column_end":28},"kind":{"variant":"Impl","fields":[54]},"from":{"krate":0,"index":1142},"to":{"krate":1,"index":2470}}]}