{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.18.2","compilation":{"directory":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,97,116,111,109,45,48,46,51,46,53],"program":"/Users/Kumar/.rustup/toolchains/nightly-2019-02-27-x86_64-apple-darwin/bin/rls","arguments":["--crate-name","atom","/Users/Kumar/.cargo/registry/src/github.com-1ecc6299db9ec823/atom-0.3.5/src/lib.rs","--color","never","--crate-type","lib","--emit=dep-info,metadata","-C","debuginfo=2","-C","metadata=0e55279df07c043c","-C","extra-filename=-0e55279df07c043c","--out-dir","/Users/Kumar/personal/workspace/rust/mayhem-galactica/target/rls/debug/deps","-L","dependency=/Users/Kumar/personal/workspace/rust/mayhem-galactica/target/rls/debug/deps","--cap-lints","allow","--error-format=json","--sysroot","/Users/Kumar/.rustup/toolchains/nightly-2019-02-27-x86_64-apple-darwin"],"output":[47,85,115,101,114,115,47,75,117,109,97,114,47,112,101,114,115,111,110,97,108,47,119,111,114,107,115,112,97,99,101,47,114,117,115,116,47,109,97,121,104,101,109,45,103,97,108,97,99,116,105,99,97,47,116,97,114,103,101,116,47,114,108,115,47,100,101,98,117,103,47,100,101,112,115,47,108,105,98,97,116,111,109,45,48,101,53,53,50,55,57,100,102,48,55,99,48,52,51,99,46,114,109,101,116,97]},"prelude":{"crate_id":{"name":"atom","disambiguator":[13423142934771749731,4610493859238226395]},"crate_root":"/Users/Kumar/.cargo/registry/src/github.com-1ecc6299db9ec823/atom-0.3.5/src","external_crates":[{"file_name":"/Users/Kumar/.cargo/registry/src/github.com-1ecc6299db9ec823/atom-0.3.5/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[17365010580081952725,18206160307474953630]}},{"file_name":"/Users/Kumar/.cargo/registry/src/github.com-1ecc6299db9ec823/atom-0.3.5/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[6760693024494354245,14002820984158080208]}},{"file_name":"/Users/Kumar/.cargo/registry/src/github.com-1ecc6299db9ec823/atom-0.3.5/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[199464317358532175,14697293645914925506]}},{"file_name":"/Users/Kumar/.cargo/registry/src/github.com-1ecc6299db9ec823/atom-0.3.5/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[13558819658400235840,6800895293433658904]}},{"file_name":"/Users/Kumar/.cargo/registry/src/github.com-1ecc6299db9ec823/atom-0.3.5/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[18425220944332119967,14239145101900690943]}},{"file_name":"/Users/Kumar/.cargo/registry/src/github.com-1ecc6299db9ec823/atom-0.3.5/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[10854247164472963508,11478657302719725741]}},{"file_name":"/Users/Kumar/.cargo/registry/src/github.com-1ecc6299db9ec823/atom-0.3.5/src/lib.rs","num":7,"id":{"name":"rustc_demangle","disambiguator":[4168194895173621532,15234647754953002462]}},{"file_name":"/Users/Kumar/.cargo/registry/src/github.com-1ecc6299db9ec823/atom-0.3.5/src/lib.rs","num":8,"id":{"name":"unwind","disambiguator":[12306654840912142307,10869972980572175885]}},{"file_name":"/Users/Kumar/.cargo/registry/src/github.com-1ecc6299db9ec823/atom-0.3.5/src/lib.rs","num":9,"id":{"name":"backtrace_sys","disambiguator":[1531625639640313062,14514900902579754273]}},{"file_name":"/Users/Kumar/.cargo/registry/src/github.com-1ecc6299db9ec823/atom-0.3.5/src/lib.rs","num":10,"id":{"name":"panic_unwind","disambiguator":[13209889598193010227,616765238597587583]}}],"span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,97,116,111,109,45,48,46,51,46,53,47,115,114,99,47,108,105,98,46,114,115],"byte_start":612,"byte_end":9613,"line_start":15,"line_end":340,"column_start":1,"column_end":2}},"imports":[],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,97,116,111,109,45,48,46,51,46,53,47,115,114,99,47,108,105,98,46,114,115],"byte_start":612,"byte_end":9613,"line_start":15,"line_end":340,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/Users/Kumar/.cargo/registry/src/github.com-1ecc6299db9ec823/atom-0.3.5/src/lib.rs","parent":null,"children":[{"krate":0,"index":2},{"krate":0,"index":4},{"krate":0,"index":6},{"krate":0,"index":14},{"krate":0,"index":16},{"krate":0,"index":18},{"krate":0,"index":20},{"krate":0,"index":22},{"krate":0,"index":24},{"krate":0,"index":26},{"krate":0,"index":28},{"krate":0,"index":30},{"krate":0,"index":34},{"krate":0,"index":50},{"krate":0,"index":54},{"krate":0,"index":56},{"krate":0,"index":58},{"krate":0,"index":62},{"krate":0,"index":66},{"krate":0,"index":70},{"krate":0,"index":74},{"krate":0,"index":78},{"krate":0,"index":82},{"krate":0,"index":84},{"krate":0,"index":118},{"krate":0,"index":120},{"krate":0,"index":86},{"krate":0,"index":100},{"krate":0,"index":104},{"krate":0,"index":108},{"krate":0,"index":112}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":28},"span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,97,116,111,109,45,48,46,51,46,53,47,115,114,99,47,108,105,98,46,114,115],"byte_start":931,"byte_end":935,"line_start":26,"line_end":26,"column_start":12,"column_end":16},"name":"Atom","qualname":"::Atom","value":"Atom {  }","parent":null,"children":[{"krate":0,"index":21},{"krate":0,"index":23}],"decl_id":null,"docs":" An Atom wraps an AtomicPtr, it allows for safe mutation of an atomic\n into common Rust Types.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":36},"span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,97,116,111,109,45,48,46,51,46,53,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1337,"byte_end":1342,"line_start":48,"line_end":48,"column_start":12,"column_end":17},"name":"empty","qualname":"<Atom<P>>::empty","value":"fn () -> Atom<P>","parent":null,"children":[],"decl_id":null,"docs":" Create a empty Atom\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":38},"span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,97,116,111,109,45,48,46,51,46,53,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1527,"byte_end":1530,"line_start":56,"line_end":56,"column_start":12,"column_end":15},"name":"new","qualname":"<Atom<P>>::new","value":"fn (value: P) -> Atom<P>","parent":null,"children":[],"decl_id":null,"docs":" Create a new Atomic from Pointer P\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":40},"span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,97,116,111,109,45,48,46,51,46,53,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1820,"byte_end":1824,"line_start":65,"line_end":65,"column_start":12,"column_end":16},"name":"swap","qualname":"<Atom<P>>::swap","value":"fn (&self, v: P) -> Option<P>","parent":null,"children":[],"decl_id":null,"docs":" Swap a new value into the Atom, This will try multiple\n times until it succeeds. The old value will be returned.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":42},"span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,97,116,111,109,45,48,46,51,46,53,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2269,"byte_end":2273,"line_start":78,"line_end":78,"column_start":12,"column_end":16},"name":"take","qualname":"<Atom<P>>::take","value":"fn (&self) -> Option<P>","parent":null,"children":[],"decl_id":null,"docs":" Take the value of the Atom replacing it with null pointer\n Returning the contents. If the contents was a `null` pointer the\n result will be `None`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":44},"span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,97,116,111,109,45,48,46,51,46,53,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2762,"byte_end":2773,"line_start":91,"line_end":91,"column_start":12,"column_end":23},"name":"set_if_none","qualname":"<Atom<P>>::set_if_none","value":"fn (&self, v: P) -> Option<P>","parent":null,"children":[],"decl_id":null,"docs":" This will do a `CAS` setting the value only if it is NULL\n this will return `None` if the value was written,\n otherwise a `Some(v)` will be returned, where the value was\n the same value that you passed into this function\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":46},"span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,97,116,111,109,45,48,46,51,46,53,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3320,"byte_end":3340,"line_start":106,"line_end":106,"column_start":12,"column_end":32},"name":"replace_and_set_next","qualname":"<Atom<P>>::replace_and_set_next","value":"fn (&self, mut value: P) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Take the current content, write it into P then do a CAS to extent this\n Atom with the previous contents. This can be used to create a LIFO","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":48},"span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,97,116,111,109,45,48,46,51,46,53,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4337,"byte_end":4344,"line_start":135,"line_end":135,"column_start":12,"column_end":19},"name":"is_none","qualname":"<Atom<P>>::is_none","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Check to see if an atom is None","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":58},"span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,97,116,111,109,45,48,46,51,46,53,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4903,"byte_end":4913,"line_start":166,"line_end":166,"column_start":11,"column_end":21},"name":"IntoRawPtr","qualname":"::IntoRawPtr","value":"IntoRawPtr","parent":null,"children":[{"krate":0,"index":60}],"decl_id":null,"docs":" Convert from into a raw pointer\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":60},"span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,97,116,111,109,45,48,46,51,46,53,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4930,"byte_end":4938,"line_start":167,"line_end":167,"column_start":15,"column_end":23},"name":"into_raw","qualname":"::IntoRawPtr::into_raw","value":"fn (self) -> *mut ()","parent":{"krate":0,"index":58},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":62},"span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,97,116,111,109,45,48,46,51,46,53,47,115,114,99,47,108,105,98,46,114,115],"byte_start":5012,"byte_end":5022,"line_start":171,"line_end":171,"column_start":11,"column_end":21},"name":"FromRawPtr","qualname":"::FromRawPtr","value":"FromRawPtr","parent":null,"children":[{"krate":0,"index":64}],"decl_id":null,"docs":" Convert from a raw ptr into a pointer\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":64},"span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,97,116,111,109,45,48,46,51,46,53,47,115,114,99,47,108,105,98,46,114,115],"byte_start":5039,"byte_end":5047,"line_start":172,"line_end":172,"column_start":15,"column_end":23},"name":"from_raw","qualname":"::FromRawPtr::from_raw","value":"fn (ptr: *mut ()) -> Self","parent":{"krate":0,"index":62},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":118},"span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,97,116,111,109,45,48,46,51,46,53,47,115,114,99,47,108,105,98,46,114,115],"byte_start":6289,"byte_end":6300,"line_start":221,"line_end":221,"column_start":12,"column_end":23},"name":"AtomSetOnce","qualname":"::AtomSetOnce","value":"AtomSetOnce {  }","parent":null,"children":[{"krate":0,"index":73}],"decl_id":null,"docs":" This is a restricted version of the Atom. It allows for only\n `set_if_none` to be called.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":88},"span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,97,116,111,109,45,48,46,51,46,53,47,115,114,99,47,108,105,98,46,114,115],"byte_start":6479,"byte_end":6484,"line_start":233,"line_end":233,"column_start":12,"column_end":17},"name":"empty","qualname":"<AtomSetOnce<P>>::empty","value":"fn () -> AtomSetOnce<P>","parent":null,"children":[],"decl_id":null,"docs":" Create an empty `AtomSetOnce`\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":90},"span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,97,116,111,109,45,48,46,51,46,53,47,115,114,99,47,108,105,98,46,114,115],"byte_start":6641,"byte_end":6644,"line_start":240,"line_end":240,"column_start":12,"column_end":15},"name":"new","qualname":"<AtomSetOnce<P>>::new","value":"fn (value: P) -> AtomSetOnce<P>","parent":null,"children":[],"decl_id":null,"docs":" Create a new `AtomSetOnce` from Pointer P\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":92},"span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,97,116,111,109,45,48,46,51,46,53,47,115,114,99,47,108,105,98,46,114,115],"byte_start":7013,"byte_end":7024,"line_start":250,"line_end":250,"column_start":12,"column_end":23},"name":"set_if_none","qualname":"<AtomSetOnce<P>>::set_if_none","value":"fn (&self, v: P) -> Option<P>","parent":null,"children":[],"decl_id":null,"docs":" This will do a `CAS` setting the value only if it is NULL\n this will return `OK(())` if the value was written,\n otherwise a `Err(P)` will be returned, where the value was\n the same value that you passed into this function\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":94},"span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,97,116,111,109,45,48,46,51,46,53,47,115,114,99,47,108,105,98,46,114,115],"byte_start":7153,"byte_end":7162,"line_start":255,"line_end":255,"column_start":12,"column_end":21},"name":"into_atom","qualname":"<AtomSetOnce<P>>::into_atom","value":"fn (self) -> Atom<P>","parent":null,"children":[],"decl_id":null,"docs":" Convert an `AtomSetOnce` into an `Atom`\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":96},"span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,97,116,111,109,45,48,46,51,46,53,47,115,114,99,47,108,105,98,46,114,115],"byte_start":7283,"byte_end":7287,"line_start":260,"line_end":260,"column_start":12,"column_end":16},"name":"atom","qualname":"<AtomSetOnce<P>>::atom","value":"fn (&mut self) -> &mut Atom<P>","parent":null,"children":[],"decl_id":null,"docs":" Allow access to the atom if exclusive access is granted\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":98},"span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,97,116,111,109,45,48,46,51,46,53,47,115,114,99,47,108,105,98,46,114,115],"byte_start":7479,"byte_end":7486,"line_start":267,"line_end":267,"column_start":12,"column_end":19},"name":"is_none","qualname":"<AtomSetOnce<P>>::is_none","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Check to see if an atom is None","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":102},"span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,97,116,111,109,45,48,46,51,46,53,47,115,114,99,47,108,105,98,46,114,115],"byte_start":7681,"byte_end":7684,"line_start":277,"line_end":277,"column_start":12,"column_end":15},"name":"get","qualname":"<AtomSetOnce<P>>::get","value":"fn <'a> (&'a self) -> Option<&'a T>","parent":null,"children":[],"decl_id":null,"docs":" If the Atom is set, get the value\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":106},"span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,97,116,111,109,45,48,46,51,46,53,47,115,114,99,47,108,105,98,46,114,115],"byte_start":8279,"byte_end":8286,"line_start":296,"line_end":296,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<AtomSetOnce<Box<T>>>::get_mut","value":"fn <'a> (&'a mut self) -> Option<&'a mut T>","parent":null,"children":[],"decl_id":null,"docs":" If the Atom is set, get the value\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":110},"span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,97,116,111,109,45,48,46,51,46,53,47,115,114,99,47,108,105,98,46,114,115],"byte_start":8954,"byte_end":8957,"line_start":318,"line_end":318,"column_start":12,"column_end":15},"name":"dup","qualname":"<AtomSetOnce<T>>::dup","value":"fn <'a> (&self) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Duplicate the inner pointer if it is set\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":112},"span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,97,116,111,109,45,48,46,51,46,53,47,115,114,99,47,108,105,98,46,114,115],"byte_start":9531,"byte_end":9541,"line_start":337,"line_end":337,"column_start":11,"column_end":21},"name":"GetNextMut","qualname":"::GetNextMut","value":"GetNextMut","parent":null,"children":[{"krate":0,"index":114},{"krate":0,"index":116}],"decl_id":null,"docs":" This is a utility Trait that fetches the next ptr from\n an object.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":114},"span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,97,116,111,109,45,48,46,51,46,53,47,115,114,99,47,108,105,98,46,114,115],"byte_start":9553,"byte_end":9560,"line_start":338,"line_end":338,"column_start":10,"column_end":17},"name":"NextPtr","qualname":"::GetNextMut::NextPtr","value":"type NextPtr;","parent":{"krate":0,"index":112},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":116},"span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,97,116,111,109,45,48,46,51,46,53,47,115,114,99,47,108,105,98,46,114,115],"byte_start":9569,"byte_end":9577,"line_start":339,"line_end":339,"column_start":8,"column_end":16},"name":"get_next","qualname":"::GetNextMut::get_next","value":"fn (&mut self) -> &mut Self::NextPtr","parent":{"krate":0,"index":112},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,97,116,111,109,45,48,46,51,46,53,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1052,"byte_end":1056,"line_start":34,"line_end":34,"column_start":19,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":32}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Inherent","span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,97,116,111,109,45,48,46,51,46,53,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1250,"byte_end":1254,"line_start":43,"line_end":43,"column_start":9,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":36},{"krate":0,"index":38},{"krate":0,"index":40},{"krate":0,"index":42},{"krate":0,"index":44},{"krate":0,"index":46},{"krate":0,"index":48}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,97,116,111,109,45,48,46,51,46,53,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4441,"byte_end":4445,"line_start":140,"line_end":140,"column_start":18,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":52}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,97,116,111,109,45,48,46,51,46,53,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4732,"byte_end":4736,"line_start":154,"line_end":154,"column_start":25,"column_end":29},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,97,116,111,109,45,48,46,51,46,53,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4806,"byte_end":4810,"line_start":159,"line_end":159,"column_start":25,"column_end":29},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,97,116,111,109,45,48,46,51,46,53,47,115,114,99,47,108,105,98,46,114,115],"byte_start":5097,"byte_end":5100,"line_start":175,"line_end":175,"column_start":24,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":68}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,97,116,111,109,45,48,46,51,46,53,47,115,114,99,47,108,105,98,46,114,115],"byte_start":5233,"byte_end":5236,"line_start":182,"line_end":182,"column_start":24,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":72}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,97,116,111,109,45,48,46,51,46,53,47,115,114,99,47,108,105,98,46,114,115],"byte_start":5374,"byte_end":5377,"line_start":189,"line_end":189,"column_start":24,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":76}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,97,116,111,109,45,48,46,51,46,53,47,115,114,99,47,108,105,98,46,114,115],"byte_start":5520,"byte_end":5523,"line_start":196,"line_end":196,"column_start":24,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":80}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Inherent","span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,97,116,111,109,45,48,46,51,46,53,47,115,114,99,47,108,105,98,46,114,115],"byte_start":6375,"byte_end":6386,"line_start":228,"line_end":228,"column_start":9,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":88},{"krate":0,"index":90},{"krate":0,"index":92},{"krate":0,"index":94},{"krate":0,"index":96},{"krate":0,"index":98}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Inherent","span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,97,116,111,109,45,48,46,51,46,53,47,115,114,99,47,108,105,98,46,114,115],"byte_start":7553,"byte_end":7564,"line_start":272,"line_end":272,"column_start":12,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":102}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Inherent","span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,97,116,111,109,45,48,46,51,46,53,47,115,114,99,47,108,105,98,46,114,115],"byte_start":8204,"byte_end":8215,"line_start":294,"line_end":294,"column_start":9,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":106}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Inherent","span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,97,116,111,109,45,48,46,51,46,53,47,115,114,99,47,108,105,98,46,114,115],"byte_start":8831,"byte_end":8842,"line_start":313,"line_end":313,"column_start":9,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":110}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,97,116,111,109,45,48,46,51,46,53,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1052,"byte_end":1056,"line_start":34,"line_end":34,"column_start":19,"column_end":23},"kind":{"variant":"Impl","fields":[0]},"from":{"krate":0,"index":28},"to":{"krate":2,"index":8426}},{"span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,97,116,111,109,45,48,46,51,46,53,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1250,"byte_end":1254,"line_start":43,"line_end":43,"column_start":9,"column_end":13},"kind":{"variant":"Impl","fields":[1]},"from":{"krate":0,"index":28},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,97,116,111,109,45,48,46,51,46,53,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4441,"byte_end":4445,"line_start":140,"line_end":140,"column_start":18,"column_end":22},"kind":{"variant":"Impl","fields":[2]},"from":{"krate":0,"index":28},"to":{"krate":2,"index":1978}},{"span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,97,116,111,109,45,48,46,51,46,53,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4732,"byte_end":4736,"line_start":154,"line_end":154,"column_start":25,"column_end":29},"kind":{"variant":"Impl","fields":[3]},"from":{"krate":0,"index":28},"to":{"krate":2,"index":1700}},{"span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,97,116,111,109,45,48,46,51,46,53,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4806,"byte_end":4810,"line_start":159,"line_end":159,"column_start":25,"column_end":29},"kind":{"variant":"Impl","fields":[4]},"from":{"krate":0,"index":28},"to":{"krate":2,"index":1712}},{"span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,97,116,111,109,45,48,46,51,46,53,47,115,114,99,47,108,105,98,46,114,115],"byte_start":5097,"byte_end":5100,"line_start":175,"line_end":175,"column_start":24,"column_end":27},"kind":{"variant":"Impl","fields":[5]},"from":{"krate":5,"index":130},"to":{"krate":0,"index":58}},{"span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,97,116,111,109,45,48,46,51,46,53,47,115,114,99,47,108,105,98,46,114,115],"byte_start":5233,"byte_end":5236,"line_start":182,"line_end":182,"column_start":24,"column_end":27},"kind":{"variant":"Impl","fields":[6]},"from":{"krate":5,"index":130},"to":{"krate":0,"index":62}},{"span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,97,116,111,109,45,48,46,51,46,53,47,115,114,99,47,108,105,98,46,114,115],"byte_start":5374,"byte_end":5377,"line_start":189,"line_end":189,"column_start":24,"column_end":27},"kind":{"variant":"Impl","fields":[7]},"from":{"krate":5,"index":2698},"to":{"krate":0,"index":58}},{"span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,97,116,111,109,45,48,46,51,46,53,47,115,114,99,47,108,105,98,46,114,115],"byte_start":5520,"byte_end":5523,"line_start":196,"line_end":196,"column_start":24,"column_end":27},"kind":{"variant":"Impl","fields":[8]},"from":{"krate":5,"index":2698},"to":{"krate":0,"index":62}},{"span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,97,116,111,109,45,48,46,51,46,53,47,115,114,99,47,108,105,98,46,114,115],"byte_start":6375,"byte_end":6386,"line_start":228,"line_end":228,"column_start":9,"column_end":20},"kind":{"variant":"Impl","fields":[9]},"from":{"krate":0,"index":118},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,97,116,111,109,45,48,46,51,46,53,47,115,114,99,47,108,105,98,46,114,115],"byte_start":7553,"byte_end":7564,"line_start":272,"line_end":272,"column_start":12,"column_end":23},"kind":{"variant":"Impl","fields":[10]},"from":{"krate":0,"index":118},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,97,116,111,109,45,48,46,51,46,53,47,115,114,99,47,108,105,98,46,114,115],"byte_start":8204,"byte_end":8215,"line_start":294,"line_end":294,"column_start":9,"column_end":20},"kind":{"variant":"Impl","fields":[11]},"from":{"krate":0,"index":118},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,85,115,101,114,115,47,75,117,109,97,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,97,116,111,109,45,48,46,51,46,53,47,115,114,99,47,108,105,98,46,114,115],"byte_start":8831,"byte_end":8842,"line_start":313,"line_end":313,"column_start":9,"column_end":20},"kind":{"variant":"Impl","fields":[12]},"from":{"krate":0,"index":118},"to":{"krate":4294967295,"index":4294967295}}]}